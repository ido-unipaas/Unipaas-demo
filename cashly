<!DOCTYPE html>

<html lang="en">

<head>
  <meta charset="utf-8" />
  <meta content="width=device-width, initial-scale=1.0" name="viewport" />
  <title>Cashly</title>
  <!-- Import fonts -->
  <link
    href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&amp;family=Roboto:wght@400;600;700&amp;display=swap"
    rel="stylesheet" />
  <!-- UniPaas Embedded UI -->
  <script src="https://cdn.unipaas.com/embedded-ui.js">
    // Highlight active tab in sidebar
    document.querySelectorAll('.sidebar .nav-link').forEach(link => {
      link.addEventListener('click', () => {
        document.querySelectorAll('.sidebar .nav-link').forEach(l => l.classList.remove('active'));
        link.classList.add('active');
      });
    });

  </script>
  <style>
    /* Reset/normalize */
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    /* Root variables for theming */
    :root {
      --secondary-color: #00bfa5;
      --primary-color: #2D3E50;
      --body-bg-color: #F8F8F8;
      --menu-bg-color: #EDF0F5;
      --card-bg-color: #FFFFFF;
      --text-color: #333333;
      --light-text-color: #888888;
      --nav-height: 60px;
      --transition-speed: 0.3s;
    }

    body {
      font-family: 'Inter', sans-serif;
      font-size: 16px;
      background-color: var(--body-bg-color);
      color: var(--text-color);
      line-height: 1.4;
    }

    /* TOP NAVIGATION */
    .top-nav {
      display: flex;
      align-items: center;
      justify-content: space-between;
      background-color: var(--primary-color);
      color: #FFF;
      height: var(--nav-height);
      padding: 0 1rem;
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      z-index: 1000;
    }

    .top-nav .logo img {
      width: 77px;
      height: 24.9px;
    }

    .top-menu {
      display: flex;
      align-items: center;
    }

    .top-menu a {
      color: #FFF;
      text-decoration: none;
      font-size: 0.9rem;
      margin-left: 1rem;
      transition: color var(--transition-speed);
      cursor: pointer;
    }

    .top-menu a:hover {
      color: #ddd;
    }

    /* Toggle switch container in the top menu */
    .toggle-container {
      display: flex;
      align-items: center;
      margin-left: 1rem;
    }

    .toggle-container span {
      margin-left: 0.5rem;
      font-size: 0.9rem;
    }

    /* Toggle Switch CSS */
    .switch {
      position: relative;
      display: inline-block;
      width: 40px;
      height: 20px;
    }

    .switch input {
      opacity: 0;
      width: 0;
      height: 0;
    }

    .slider {
      position: absolute;
      cursor: pointer;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: #ccc;
      transition: .4s;
      border-radius: 20px;
    }

    .slider:before {
      position: absolute;
      content: "";
      height: 16px;
      width: 16px;
      left: 2px;
      bottom: 2px;
      background-color: white;
      transition: .4s;
      border-radius: 50%;
    }

    input:checked+.slider {
      background-color: #2196F3;
    }

    input:checked+.slider:before {
      transform: translateX(20px);
    }

    /* CONTENT WRAPPER (push below fixed header) */
    .content-wrapper {
      display: flex;
      align-items: flex-start;
      padding: 1.5rem;
      gap: 1.5rem;
      margin-top: var(--nav-height);
    }

    /* SIDEBAR (MENU) */
    #sidebar {
      width: 231px;
      background-color: var(--menu-bg-color);
      border-radius: 8px;
      padding: 1rem;
      flex-shrink: 0;
      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    }

    .sidebar-header {
      margin-bottom: 1.5rem;
    }

    .myclub-admin-btn {
      display: inline-block;
      background-color: #FFF;
      color: #000;
      padding: 0.5rem 1rem;
      border-radius: 4px;
      font-family: 'Roboto', sans-serif;
      font-weight: 700;
      font-size: 13px;
      line-height: 18.2px;
      text-decoration: none;
      transition: background-color var(--transition-speed);
      cursor: pointer;
    }

    .myclub-admin-btn:hover {
      background-color: #f2f2f2;
    }

    .sidebar ul {
      list-style: none;
      padding-left: 0;
    }

    .sidebar ul li {
      display: block;
      padding: 0.75rem;
      cursor: pointer;
      border-radius: 4px;
      transition: background-color var(--transition-speed);
      font-family: 'Roboto', sans-serif;
      font-size: 13px;
    }

    .sidebar ul li:hover {
      background-color: #E0E4EA;
    }

    .sidebar ul li.active {
      background-color: #EDEAFD;
      color: var(--primary-color);
    }

    .sidebar ul li img {
      vertical-align: middle;
      width: 20px;
      height: 20px;
      margin-right: 8px;
    }

    /* Submenu for plan */
    #planSubmenu {
      list-style: none;
      padding-left: 1rem;
      display: none;
    }

    #planSubmenu li {
      padding: 0.5rem;
      cursor: pointer;
      font-size: 12px;
    }

    #planSubmenu li:hover {
      background-color: #dcdcdc;
    }

    /* MAIN CONTENT */
    main {
      flex: 1;
    }

    .page-section {
      display: none;
    }

    .page-section.active {
      display: block;
    }

    .page-title {
      margin-bottom: 2rem;
    }

    .page-title h1 {
      font-size: 1.5rem;
      font-weight: 600;
      margin-bottom: 0.5rem;
    }

    .page-title p {
      color: var(--light-text-color);
      font-size: 0.95rem;
    }

    .cards {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(220px, 1fr));
      gap: 1rem;
      margin-bottom: 2rem;
    }

    .card {
      background-color: var(--card-bg-color);
      border-radius: 4px;
      padding: 1rem;
      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    }

    .card h2 {
      font-family: 'Roboto', sans-serif;
      font-weight: 600;
      font-size: 18px;
      color: var(--primary-color);
      margin-bottom: 0.5rem;
    }

    .card .value {
      font-size: 2rem;
      font-weight: 700;
      margin-bottom: 0.25rem;
    }

    .card .subtitle {
      font-size: 0.875rem;
      color: var(--light-text-color);
    }

    .chart-placeholder {
      background-color: #EAEAEA;
      height: 300px;
      border-radius: 4px;
      margin-bottom: 2rem;
    }

    /* FOOTER BANNER */
    .footer-banner {
      position: fixed;
      bottom: 0;
      left: 0;
      width: 100%;
      background-color: #F2F2F2;
      padding: 1rem;
      text-align: center;
      display: flex;
      justify-content: center;
      align-items: center;
      gap: 1rem;
      z-index: 1000;
    }

    .footer-banner p {
      font-size: 0.875rem;
    }

    .learn-more-btn {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      width: 108px;
      height: 32px;
      padding: 6.4px 12.8px;
      border-radius: 4px;
      border: none;
      background-color: var(--primary-color);
      color: #FFF;
      font-family: 'Roboto', sans-serif;
      font-weight: 700;
      font-size: 13px;
      cursor: pointer;
    }

    /* Modal Backdrop */
    .modal-backdrop {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.5);
      z-index: 2000;
      justify-content: center;
      align-items: center;
    }

    .modal-backdrop.active {
      display: flex;
    }

    .modal-content {
      background: #fff;
      padding: 1rem;
      border-radius: 6px;
      width: 400px;
      max-width: 90%;
      max-height: 90%;
      overflow-y: auto;
      position: relative;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.4);
    }

    /* New "QR style" modal design */
    .qr-modal {
      width: 500px;
      padding: 1.5rem;
      text-align: center;
      border-radius: 6px;
    }

    .qr-modal .close-btn {
      background: none;
      border: none;
      font-size: 20px;
      color: #666;
      cursor: pointer;
      position: absolute;
      top: 10px;
      right: 10px;
    }

    .qr-modal h2 {
      margin-bottom: 1rem;
      font-size: 1.8rem;
      font-weight: 600;
    }

    /* New modal header section for Payment Option Modal */
    .modal-header-details {
      border-bottom: 1px solid #ddd;
      margin-bottom: 1rem;
      padding-bottom: 0.5rem;
      text-align: left;
    }

    .modal-header-details>div {
      margin-bottom: 0.5rem;
    }

    .modal-header-details label {
      margin-right: 0.5rem;
    }

    .qr-modal .button-row {
      display: flex;
      gap: 1rem;
      justify-content: center;
      margin-bottom: 1.5rem;
    }

    .qr-modal .action-btn {
      background-color: var(--primary-color);
      color: #fff;
      padding: 0.6rem 1.2rem;
      border: none;
      border-radius: 4px;
      font-weight: 600;
      cursor: pointer;
    }

    .qr-modal .action-btn:hover {
      opacity: 0.9;
    }

    .qr-modal .disabled-btn {
      opacity: 0.7;
      cursor: not-allowed;
    }

    .qr-modal .qr-instructions {
      margin: 1rem 0;
      color: var(--light-text-color);
      font-size: 0.9rem;
    }

    .qr-modal .qr-code {
      width: 150px;
      height: 150px;
      margin: 0 auto 1rem auto;
      display: block;
    }

    .qr-modal .copy-qr-btn {
      display: block;
      margin: 0 auto 1rem auto;
      background-color: #edf0f5;
      color: var(--text-color);
      padding: 0.5rem 1rem;
      border: none;
      border-radius: 4px;
      font-weight: 600;
      cursor: pointer;
    }

    .qr-modal .copy-qr-btn:hover {
      background-color: #ddd;
    }

    .qr-modal .payment-link-label {
      font-weight: 600;
      margin-bottom: 0.25rem;
    }

    .qr-modal .payment-link-value {
      color: var(--primary-color);
      word-break: break-all;
      font-size: 0.88rem;
      text-decoration: underline;
      cursor: pointer;
    }

    /* MEMBERS SECTION */
    .members-filters {
      display: flex;
      flex-wrap: wrap;
      gap: 1rem;
      align-items: center;
      margin-bottom: 1rem;
    }

    .members-filters .search-bar input {
      padding: 0.5rem 0.75rem;
      border: 1px solid #ccc;
      border-radius: 4px;
    }

    .members-filters select {
      padding: 0.45rem 0.75rem;
      border: 1px solid #ccc;
      border-radius: 4px;
      background-color: #fff;
      font-size: 0.95rem;
    }

    .show-only {
      display: flex;
      align-items: center;
      font-size: 0.9rem;
    }

    .show-only>span {
      margin-right: 0.5rem;
      color: var(--light-text-color);
    }

    .show-only input {
      margin-right: 4px;
    }

    .members-actions .btn {
      background-color: #00bfa5;
      color: #fff;
      border: none;
      padding: 0.45rem 1rem;
      border-radius: 4px;
      font-size: 0.9rem;
      cursor: pointer;
    }

    .members-actions .btn:hover {
      background-color: #00bfa5;
    }

    .customer-list {
      display: flex;
      flex-direction: column;
      gap: 1rem;
    }

    .customer-card {
      display: flex;
      align-items: center;
      gap: 1rem;
      background-color: var(--card-bg-color);
      border-radius: 8px;
      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
      padding: 1rem;
      position: relative;
    }

    .avatar {
      width: 40px;
      height: 40px;
      border-radius: 50%;
      background-color: var(--menu-bg-color);
      display: flex;
      align-items: center;
      justify-content: center;
      color: var(--text-color);
      font-weight: 600;
      text-transform: uppercase;
      font-size: 0.9rem;
    }

    .customer-info {
      flex: 1;
    }

    .customer-name {
      font-weight: 600;
      font-size: 1rem;
      margin-bottom: 2px;
      cursor: pointer;
    }

    .customer-email {
      font-size: 0.9rem;
      color: var(--light-text-color);
    }

    .customer-status {
      font-size: 0.85rem;
      font-weight: 600;
      color: var(--primary-color);
      margin-right: 0.5rem;
    }

    .customer-badge {
      display: inline-block;
      padding: 0.25rem 0.5rem;
      border-radius: 4px;
      font-size: 0.75rem;
      font-weight: 600;
      line-height: 1.2;
      color: #333;
      background-color: #e0e4ea;
    }

    .customer-badge.new {
      background-color: #d1e7dd;
      color: #0f5132;
    }

    .customer-badge.unclaimed {
      background-color: #fff3cd;
      color: #664d03;
    }

    /* MEMBER PROFILE SECTION */
    .member-profile-section {
      margin-top: 1rem;
      background-color: #fff;
      border-radius: 8px;
      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
      padding: 1.5rem;
      max-width: 900px;
    }

    .member-profile-header {
      display: flex;
      align-items: center;
      gap: 1.5rem;
      margin-bottom: 1.5rem;
    }

    .member-profile-avatar {
      width: 80px;
      height: 80px;
      border-radius: 50%;
      background-color: #F0E9D8;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 1.4rem;
      font-weight: 600;
      color: #666;
    }

    .member-profile-name {
      font-size: 1.25rem;
      font-weight: 600;
      margin-bottom: 0.25rem;
      text-transform: capitalize;
    }

    .member-profile-joined {
      font-size: 0.9rem;
      color: var(--light-text-color);
    }

    .member-tabs {
      display: flex;
      gap: 1rem;
      margin-bottom: 1rem;
    }

    .member-tabs>div {
      background-color: #f5f5f5;
      padding: 0.5rem 1rem;
      border-radius: 4px;
      font-size: 0.85rem;
      font-weight: 600;
      cursor: pointer;
    }

    .member-tabs>div:hover {
      background-color: #e8e8e8;
    }

    #member-payment-details {
      margin-bottom: 1rem;
    }

    .member-details-table {
      width: 100%;
      border-collapse: collapse;
      margin-bottom: 1rem;
    }

    .member-details-table th,
    .member-details-table td {
      text-align: left;
      padding: 0.5rem;
      border-bottom: 1px solid #eee;
      vertical-align: top;
    }

    .back-to-list-btn {
      background-color: var(--primary-color);
      color: #fff;
      border: none;
      padding: 0.45rem 1rem;
      border-radius: 4px;
      font-size: 0.9rem;
      cursor: pointer;
    }

    .back-to-list-btn:hover {
      background-color: #1d0e87;
    }

    /* Payment Method Table */
    .payment-method-table {
      width: 100%;
      border-collapse: collapse;
    }

    .payment-method-table th,
    .payment-method-table td {
      padding: 8px;
      text-align: left;
      border: 1px solid #ddd;
    }

    .visa-logo {
      display: inline-block;
      width: 24px;
      height: 16px;
      background-image: url('visa-logo.png');
      background-size: contain;
      background-repeat: no-repeat;
      vertical-align: middle;
      margin-right: 4px;
    }

    /* Common .btn style */
    .btn {
      background-color: #00bfa5;
      color: #fff;
      border: none;
      padding: 0.45rem 1rem;
      border-radius: 4px;
      font-size: 0.9rem;
      cursor: pointer;
    }

    .btn:hover {
      background-color: #00bfa5;
    }

    .btn-sm {
      font-size: 0.8rem;
      padding: 0.4rem 0.8rem;
    }

    /* ===== New Store Section Styles (3 products) ===== */
    .store-container {
      display: flex;
      flex-direction: column;
      gap: 1.5rem;
      background-color: var(--card-bg-color);
      padding: 1rem;
      border-radius: 8px;
      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    }

    .store-search-customer {
      display: flex;
      align-items: center;
      gap: 1rem;
      flex-wrap: wrap;
    }

    .store-search-customer>label {
      font-weight: 600;
    }

    .selected-customer {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      background: #f0f0f0;
      padding: 0.4rem 0.6rem;
      border-radius: 4px;
    }

    .selected-customer .customer-name-tag {
      font-weight: 600;
    }

    .selected-customer .customer-email-tag {
      color: var(--light-text-color);
      font-size: 0.85rem;
    }

    .remove-customer-btn {
      background: none;
      border: none;
      color: #666;
      font-size: 1rem;
      cursor: pointer;
    }

    .create-customer-btn {
      background-color: #fff;
      color: #000;
      border: 1px solid #ccc;
      padding: 0.45rem 0.8rem;
      font-size: 0.9rem;
    }

    .create-customer-btn:hover {
      background-color: #f2f2f2;
    }

    .store-products {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));
      gap: 1rem;
    }

    .store-product-card {
      display: flex;
      flex-direction: column;
      align-items: flex-start;
      gap: 0.5rem;
      background-color: #fff;
      border-radius: 4px;
      padding: 1rem;
      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.08);
    }

    .product-image-placeholder {
      width: 100%;
      height: 80px;
      display: flex;
      align-items: center;
      justify-content: center;
      margin-bottom: 0.5rem;
    }

    .store-product-card .product-title {
      font-weight: 600;
      font-size: 1rem;
    }

    .product-stock {
      font-size: 0.9rem;
      color: var(--light-text-color);
    }

    .product-price {
      font-size: 1rem;
      font-weight: 500;
    }

    .product-quantity {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      margin: 0.5rem 0;
    }

    .qty-btn {
      background-color: #eee;
      width: 28px;
      height: 28px;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      font-size: 1rem;
    }

    .product-quantity input {
      width: 50px;
      text-align: center;
      border: 1px solid #ccc;
      border-radius: 4px;
      height: 28px;
    }

    .add-to-cart-btn {
      margin-top: 0.5rem;
    }

    /* ===== New Floating Preview Modal (iPhone 12 size) ===== */
    .floating-modal {
      position: fixed;
      right: 20px;
      top: 50%;
      transform: translateY(-50%);
      width: 390px;
      height: 844px;
      background-color: #fff;
      box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
      border-radius: 20px;
      z-index: 3000;
      display: none;
    }

    .floating-modal-content {
      position: relative;
      width: 100%;
      height: 100%;
    }

    .floating-modal-content iframe {
      width: 100%;
      height: 100%;
      border: none;
      border-radius: 20px;
    }

    .floating-close-btn {
      position: absolute;
      top: 10px;
      right: 10px;
      background: none;
      border: none;
      font-size: 24px;
      cursor: pointer;
      z-index: 3100;
    }

    /* ===== Improved Create Plan Section Styles ===== */
    .page-header h1 {
      font-size: 1.8rem;
      font-weight: 600;
      margin-bottom: 0.5rem;
    }

    .page-header p {
      font-size: 1rem;
      color: var(--light-text-color);
      margin-bottom: 1rem;
    }

    .form-group {
      margin-bottom: 1rem;
    }

    .form-group label {
      display: block;
      margin-bottom: 0.3rem;
      font-weight: 500;
    }

    .form-group input,
    .form-group textarea,
    .form-group select {
      width: 100%;
      padding: 0.5rem;
      border: 1px solid #ccc;
      border-radius: 4px;
    }

    .toggle-switch {
      position: relative;
      display: inline-block;
      width: 40px;
      height: 20px;
    }

    .toggle-switch input {
      opacity: 0;
      width: 0;
      height: 0;
    }

    .toggle-slider {
      position: absolute;
      cursor: pointer;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: #ccc;
      transition: 0.4s;
      border-radius: 20px;
    }

    .toggle-slider:before {
      position: absolute;
      content: "";
      height: 16px;
      width: 16px;
      left: 2px;
      bottom: 2px;
      background-color: #fff;
      transition: 0.4s;
      border-radius: 50%;
    }

    input:checked+.toggle-slider {
      background-color: #2196F3;
    }

    input:checked+.toggle-slider:before {
      transform: translateX(20px);
    }

    /* MEDIA QUERY FOR TABLET VIEW (11") */
    @media (max-width: 1024px) {

      /* Shift modals to the right so they appear next to the floating preview modal */
      #paymentOptionModal.active,
      #updatePaymentModal.active,
      #mandateModal.active,
      #floatingPreviewModal.active {
        justify-content: flex-end;
      }

      #paymentOptionModal .modal-content,
      #updatePaymentModal .modal-content,
      #mandateModal .modal-content,
      #floatingPreviewModal .modal-content {
        margin-right: 430px;
      }
    }

    .sidebar ul li {
      font-size: 15px !important;
    }

    .sidebar ul li i {
      font-size: 18px !important;
      margin-right: 10px !important;
    }


    .toggle-container {
      display: flex;
      align-items: center;
      margin-left: 1rem;
      white-space: nowrap;
      gap: 0.5rem;
      max-width: 130px;
      overflow: hidden;
    }

    .toggle-container span {
      font-size: 0.9rem;
      overflow: hidden;
      text-overflow: ellipsis;
    }


    .custom-toggle-wrapper {
      display: flex;
      align-items: center;
      margin-left: 1rem;
    }

    .custom-switch {
      display: flex;
      align-items: center;
      position: relative;
      cursor: pointer;
      user-select: none;
    }

    .custom-switch input {
      opacity: 0;
      width: 0;
      height: 0;
    }

    .custom-slider {
      position: relative;
      width: 40px;
      height: 22px;
      background-color: #ccc;
      border-radius: 34px;
      transition: 0.4s;
      margin-right: 8px;
    }

    .custom-slider::before {
      position: absolute;
      content: "";
      height: 16px;
      width: 16px;
      left: 3px;
      top: 3px;
      background-color: white;
      transition: 0.4s;
      border-radius: 50%;
    }

    .custom-switch input:checked+.custom-slider {
      background-color: #00bfa5;
    }

    .custom-switch input:checked+.custom-slider::before {
      transform: translateX(18px);
    }

    .custom-label {
      color: white;
      font-size: 0.9rem;
      white-space: nowrap;
    }

    .success-icon {
      width: 60px;
      height: 60px;
      margin-bottom: 20px;
      border-radius: 50%;
      background-color: #fff;
      display: flex;
      justify-content: center;
      align-items: center;
      margin: 0 auto 20px;
      position: relative;
    }
    
    .success-icon::before {
      content: "";
      position: absolute;
      width: 60px;
      height: 60px;
      border-radius: 50%;
      border: 3px solid #00c3a5;
      box-sizing: border-box;
    }
    
    .checkmark {
      transform: rotate(45deg);
      height: 25px;
      width: 12px;
      border-bottom: 4px solid #00c3a5;
      border-right: 4px solid #00c3a5;
      margin-top: -6px;
    }
  </style>
<style>
  /* Onboarding modal improvements */
  #onboardingModal {
    background: rgba(0,0,0,0.6) !important;
    align-items: center !important;
    justify-content: center !important;
  }
  #onboardingModal .modal-content {
    width: 600px !important;
    max-width: 90% !important;
    padding: 2rem !important;
    border-radius: 8px !important;
    box-shadow: 0px 4px 20px rgba(0,0,0,0.2) !important;
  }
  #onboardingModal .close-btn {
    background: #f0f0f0 !important;
    border-radius: 50% !important;
    width: 32px !important;
    height: 32px !important;
    font-size: 18px !important;
    line-height: 32px !important;
    display: flex !important;
    align-items: center !important;
    justify-content: center !important;
    color: #333 !important;
  }
  /* Remove spinner arrows for number inputs */
  #onboardingModal input[type=number]::-webkit-outer-spin-button,
  #onboardingModal input[type=number]::-webkit-inner-spin-button {
    -webkit-appearance: none !important;
    margin: 0 !important;
  }
  #onboardingModal input[type=number] {
    -moz-appearance: textfield !important;
  }
</style>

<!-- Settings Modal Styles -->
<style>
  /* Styles for the inline settings view */
  .modal-content.inline-settings {
    position: static;
    width: 100%;
    max-width: 600px;
    margin: 0;
    padding: 1.5rem;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  }

  .modal-content.inline-settings h2 {
    font-size: 1.5rem;
    margin-bottom: 1.5rem;
  }

  .modal-content.inline-settings label {
    display: block;
    margin-bottom: 0.5rem;
    font-weight: 500;
  }

  .modal-content.inline-settings input[type="text"] {
    width: 100%;
    padding: 0.5rem;
    margin-bottom: 1rem;
    border: 1px solid #ccc;
    border-radius: 4px;
  }

  .modal-content.inline-settings input[type="checkbox"] {
    margin-right: 0.5rem;
    margin-bottom: 1rem;
  }

  .modal-content.inline-settings button {
    background-color: var(--secondary-color);
    color: white;
    border: none;
    padding: 0.6rem 1.2rem;
    border-radius: 4px;
    font-weight: 600;
    cursor: pointer;
    margin-right: 0.5rem;
    margin-top: 1rem;
  }

  .modal-content.inline-settings button:hover {
    opacity: 0.9;
  }

  .modal-content.inline-settings #stateStatusLabel {
    display: block;
    margin: 0.5rem 0;
    font-style: italic;
    color: var(--light-text-color);
  }
</style>

<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet" />
</head>

<body>
  <!-- TOP NAVIGATION -->
  <header class="top-nav">
    <div class="logo"><i class="fa-solid fa-cash-register" style="font-size: 26px; margin-right: 8px;"></i><span
        style="font-size: 26px; font-weight: bold;">Cashly</span></div>
    <nav class="top-menu">
      <!-- New Toggle Button for HIM Vendor -->
      <div class="custom-toggle-wrapper">
        <label class="custom-switch">
          <input id="himToggle" onchange="toggleHIMVendor(this)" type="checkbox" />
          <span class="custom-slider"></span>
          <span class="custom-label">Onboard</span>
        </label>
      </div>
    </nav>
  </header>
  <!-- CONTENT WRAPPER -->
  <div class="content-wrapper">
    <!-- SIDEBAR -->
    <aside class="sidebar" id="sidebar">
      <ul>
        <li class="active" onclick="showTab('dashboard')">
          <i class="fa-solid fa-table-columns"></i>Dashboard
        </li>
        <li onclick="showTab('members')">
          <i class="fa-solid fa-users"></i>Customers
        </li>
        <li onclick="showTab('shop')">
          <i class="fa-solid fa-store"></i>Store
        </li>
        <li onclick="showTab('reports')">
          <i class="fa-solid fa-chart-line"></i>Cashly Pay
        </li>
        <li onclick="togglePlanSubmenu(event)">
          <i class="fa-solid fa-layer-group" style="font-size: 18px; margin-right: 10px;"></i>Plans
        </li>
        <ul id="planSubmenu">
          <li onclick="showTab('createPlan')">Create Plans</li>
          <li onclick="showTab('managePlan')">Manage Plans</li>
        </ul>
        <li onclick="showTab('salesInvoices')"><i class="fa-solid fa-file-invoice-dollar"
            style="font-size: 18px; margin-right: 10px;"></i>Sales Invoices</li>
        <li onclick="showTab('settings')">
          <i class="fa-solid fa-gear"></i>Settings
        </li>
      </ul>
    </aside>
    <!-- MAIN CONTENT -->
    <main>
      <!-- Dashboard Section -->
      <div class="page-section active" id="dashboard-section">
        <div class="page-title">
        </div>
        <div class="cards">
          <div class="card">
            <h2>Today's Revenue</h2>
            <p class="value">£5,400</p>
            <p class="subtitle"><button class="btn" onclick="dashboardCollectPayment()">Collect Payment</button></p>
          </div>
          <div class="card">
            <h2># of Invoices Over Due</h2>
            <p class="value">2</p>
            <p class="subtitle"><button class="btn" onclick="sendInvoiceReminder()">Send AI Reminder</button></p>
          </div>
          <div class="card">
            <h2># of Open Invoices</h2>
            <p class="value">5</p>
            <p class="subtitle"> </p>
          </div>
          <div class="card">
            <h2>Open Invoices Amount</h2>
            <p class="value">£20,550</p>
            <p class="subtitle"> </p>
          </div>
        </div>
        <div id="balance" style="width:490px; height:420px; margin-top:1rem;"></div>
      </div>
      <!-- Members Section -->
      <div class="page-section" id="members-section">
        <div class="page-title">
          <h1>Customer List</h1>
        </div>
        <div class="members-filters">
          <div class="search-bar">
            <input placeholder="Enter customer's name or email" type="text" />
          </div>
          <div class="status-filter">
            <label for="statusSelect" style="display:none;">Status</label>
            <select id="statusSelect">
              <option>Active Customers</option>
              <option>Inactive Customers</option>
              <option>All Customers</option>
            </select>
          </div>
          <div class="membership-filter">
            <label for="membershipSelect" style="display:none;">Membership</label>
            <select id="membershipSelect">
              <option>All Memberships</option>
              <option>Basic</option>
              <option>Premium</option>
            </select>
          </div>
          <div class="show-only">
            <span>Show only:</span>
            <div>
              <input id="newMembers" type="checkbox" />
              <label for="newMembers">New</label>
            </div>
            <div>
              <input id="slippingAway" type="checkbox" />
              <label for="slippingAway">Slipping Away</label>
            </div>
          </div>
          <div class="members-actions" style="margin-left:auto;">
            <button class="btn export-btn">Export Filtered List (2 customers)</button>
            <button class="btn add-customer-btn">Add a Customer</button>
          </div>
        </div>
        <!-- Customer List -->
        <div class="customer-list">
          <!-- Example Member 1 -->
          <div class="customer-card">
            <div class="avatar">OK</div>
            <div class="customer-info">
              <div class="customer-name" onclick="openMemberProfile(
                     'Oded Kovach',
                     'Feb. 20, 2025',
                     'adam.stevens@unipaas.com',
                     '21 baker street London London, London, W1W 6XH, GB',
                     '+972547674444',
                     'Male',
                     'Jan. 7, 1988',
                     'George',
                     '+97254545454',
                     'oded'
                   )">
                oded kovach
              </div>
              <div class="customer-email">adam.stevens@unipaas.com</div>
            </div>
            <div class="customer-status">ACTIVE</div>
            <div class="customer-badge new">NEW</div>
          </div>
          <!-- Example Member 2 -->
          <div class="customer-card">
            <div class="avatar">JM</div>
            <div class="customer-info">
              <div class="customer-name" onclick="openMemberProfile(
                     'John Mitch',
                     'Jan. 10, 2025',
                     'john.mitch@gmail.com',
                     '123 Green Street, London, UK',
                     '+44 20 7000 8888',
                     'Male',
                     'Apr. 2, 1990',
                     'Jenny',
                     '+44 20 5000 1234',
                     'friend'
                   )">
                John Mitch
              </div>
              <div class="customer-email">john.mitch@gmail.com</div>
            </div>
            <div class="customer-status">ACTIVE</div>
            <div class="customer-badge unclaimed">UNCLAIMED</div>
          </div>
        </div>
      </div>
      <!-- Store Section (3 products, side by side) -->
      <div class="page-section" id="shop-section">
        <div class="page-title">
          <h1>Store</h1>
          <p>Manage gym‐related products &amp; process sales.</p>
        </div>
        <div class="store-container">
          <!-- Customer Search / Selection -->
          <div class="store-search-customer">
            <label for="selectedCustomer">Search Customer</label>
            <div class="selected-customer">
              <span class="customer-name-tag">John Mitch</span>
              <span class="customer-email-tag">john.mitch@gmail.com</span>
              <button class="remove-customer-btn">×</button>
            </div>
            <span>Or</span>
            <button class="create-customer-btn">Create New Customer</button>
          </div>
          <!-- Three Products -->
          <div class="store-products">
            <!-- Product 1: Yoga Class -->
            <div class="store-product-card">
              <div class="product-image-placeholder">
                <img alt="Yoga Class Icon" src="https://img.icons8.com/ios-filled/50/000000/lotus.png" />
              </div>
              <h3 class="product-title">Yoga Class</h3>
              <p class="product-stock">12 left in stock</p>
              <p class="product-price">£15.00</p>
              <div class="product-quantity">
                <button class="qty-btn">−</button>
                <input min="1" type="number" value="1" />
                <button class="qty-btn">+</button>
              </div>
              <button class="btn add-to-cart-btn" onclick="openModal('paymentOptionModal')">Collect Payment</button>
            </div>
            <!-- Product 2: Protein Shake -->
            <div class="store-product-card">
              <div class="product-image-placeholder">
                <img alt="Protein Shake Icon" src="https://img.icons8.com/ios-filled/50/000000/milkshake.png" />
              </div>
              <h3 class="product-title">Protein Shake</h3>
              <p class="product-stock">6 left in stock</p>
              <p class="product-price">£25.00</p>
              <div class="product-quantity">
                <button class="qty-btn">−</button>
                <input min="1" type="number" value="1" />
                <button class="qty-btn">+</button>
              </div>
              <button class="btn add-to-cart-btn" onclick="openModal('paymentOptionModal')">Collect Payment</button>
            </div>
            <!-- Product 3: Yoga Mat -->
            <div class="store-product-card">
              <div class="product-image-placeholder">
                <img alt="Yoga Mat Icon" src="https://img.icons8.com/ios-filled/50/000000/yoga.png" />
              </div>
              <h3 class="product-title">Yoga Mat</h3>
              <p class="product-stock">5 left in stock</p>
              <p class="product-price">£12.00</p>
              <div class="product-quantity">
                <button class="qty-btn">−</button>
                <input min="1" type="number" value="1" />
                <button class="qty-btn">+</button>
              </div>
              <button class="btn add-to-cart-btn" onclick="openModal('paymentOptionModal')">Collect Payment</button>
            </div>
          </div>
        </div>
      </div>
      <!-- Reports Section -->
      <div class="page-section" id="reports-section">
        <div class="page-title">
        </div>
        <div class="table-container" style="padding:1rem;">
          <div id="pay_portal"></div>
        </div>
      </div>
      <!-- Plan Section -->
      <div class="page-section" id="plan-section">
        <div class="page-title">
          <h1>Membership Plans</h1>
          <p>Create or Manage membership plans for your gym.</p>
        </div>
        <div style="display:flex; gap:1rem;">
          <button class="btn" onclick="showTab('createPlan')">Create Plan</button>
          <button class="btn" onclick="showTab('managePlan')">Manage Plans</button>
        </div>
      </div>
      <!-- Create Plan Section (Improved Design) -->
      <div class="page-section" id="createPlan-section">
        <div class="page-header">
          <h1>Create a Plan</h1>
          <p>Define plan pricing, frequency, and optional trial/setup fees.</p>
        </div>
        <div style="background:#fff; padding:1rem; border-radius:6px; max-width:600px;">
          <form id="createPlanForm">
            <div class="form-group">
              <label for="planName">Plan Name</label>
              <input id="planName" placeholder="Example: Basic Plan" required="" type="text" />
            </div>
            <div class="form-group">
              <label for="planDescription">Plan Description</label>
              <textarea id="planDescription" placeholder="Describe the plan..."></textarea>
            </div>
            <div class="form-group">
              <label for="amount">Amount</label>
              <div style="display:flex; gap:0.5rem;">
                <input id="amount" min="0.01" placeholder="0.00" required="" step="0.01" style="flex:1;"
                  type="number" />
                <select id="currency" style="width:100px;">
                  <option value="GBP">GBP</option>
                </select>
              </div>
            </div>
            <div class="form-group" style="display:flex; gap:0.5rem;">
              <div style="flex:1;">
                <label for="frequency">Frequency</label>
                <select id="frequency" style="width:100%;">
                  <option selected="" value="monthly">Monthly</option>
                  <option value="weekly">Weekly</option>
                  <option value="yearly">Yearly</option>
                </select>
              </div>
              <div style="flex:1;">
                <label for="duration">Duration</label>
                <input id="duration" placeholder="(e.g., 12)" style="width:100%;" type="text" />
              </div>
            </div>
            <div class="form-group" style="display:flex; justify-content:space-between; align-items:center;">
              <span>Auto-Renewal</span>
              <label class="toggle-switch">
                <input id="autoRenewal" type="checkbox" />
                <span class="toggle-slider"></span>
              </label>
            </div>
            <div class="form-group" style="display:flex; justify-content:space-between; align-items:center;">
              <span>Trial Period</span>
              <label class="toggle-switch">
                <input id="trialPeriodToggle" type="checkbox" />
                <span class="toggle-slider"></span>
              </label>
            </div>
            <div id="trialPeriodFields"
              style="display:none; background:#f9f9f9; padding:0.5rem; border:1px solid #ddd; border-radius:4px; margin-bottom:1rem;">
              <label for="trialPeriodType">Trial Period Type</label>
              <select id="trialPeriodType" style="margin-bottom:0.5rem;">
                <option value="day">Day</option>
                <option value="week">Week</option>
                <option value="month">Month</option>
              </select>
              <label for="trialPeriodDuration">Duration</label>
              <input id="trialPeriodDuration" placeholder="e.g., 7" type="number" />
            </div>
            <div class="form-group" style="display:flex; justify-content:space-between; align-items:center;">
              <span>Setup Fee</span>
              <label class="toggle-switch">
                <input id="setupFeeToggle" type="checkbox" />
                <span class="toggle-slider"></span>
              </label>
            </div>
            <div id="setupFeeFields"
              style="display:none; background:#f9f9f9; padding:0.5rem; border:1px solid #ddd; border-radius:4px; margin-bottom:1rem;">
              <label for="setupFeeAmount">Setup Fee Amount</label>
              <div style="display:flex; gap:0.5rem;">
                <input id="setupFeeAmount" min="0" placeholder="0.00" step="0.01" style="flex:1;" type="number" />
                <select id="setupFeeCurrency" style="width:100px;">
                  <option value="GBP">GBP</option>
                </select>
              </div>
            </div>
            <div class="form-group" style="display:flex; justify-content:space-between; align-items:center;">
              <span>Pricing Model</span>
              <label class="toggle-switch">
                <input id="pricingModelToggle" type="checkbox" />
                <span class="toggle-slider"></span>
              </label>
              <span id="pricingModelLabel" style="margin-left:0.5rem;">Fixed</span>
            </div>
            <div id="rampIntervalsSection"
              style="display:none; background:#f9f9f9; padding:0.5rem; border:1px solid #ddd; border-radius:4px; margin-bottom:1rem;">
              <div style="display:flex; align-items:center; justify-content:space-between;">
                <h3 style="margin:0; font-size:1rem;">Ramp Intervals</h3>
                <button id="addRampInterval"
                  style="background:#d32f2f; color:#fff; border:none; padding:0.4rem 0.6rem; border-radius:4px; cursor:pointer;"
                  type="button">Add Interval</button>
              </div>
              <div id="rampIntervalsContainer" style="margin-top:0.5rem;"></div>
            </div>
            <button class="btn" style="width:100%;" type="submit">Create Plan</button>
          </form>
          <div id="planCreationResult" style="margin-top:0.5rem; font-weight:600;"></div>
        </div>
      </div>
      <!-- Manage Plan Section (Updated Modern Design) -->
      <!-- Settings Section -->
      <div class="page-section" id="settings-section">
        <div class="page-title">
          <h1>Settings</h1>
          <p>Configure payment keys, manage tokens, etc.</p>
        </div>
        <button class="btn" onclick="openSettingsModal()">Open Payment Settings</button>
      </div>
      <!-- MEMBER PROFILE -->
      <div class="page-section" id="member-profile-section" style="display:none;">
        <div class="member-profile-section">
          <div class="member-profile-header">
            <div class="member-profile-avatar" id="mpAvatar">OK</div>
            <div>
              <div class="member-profile-name" id="mpName">oded kovach</div>
              <div class="member-profile-joined">Date joined: <span id="mpJoined">Feb. 20, 2025</span></div>
            </div>
          </div>
          <div class="member-tabs">
            <div>Profile</div>
            <div>Activity</div>
            <div>Registrations</div>
            <div>Waivers</div>
            <div>Family</div>
            <div onclick="showPaymentDetailsForCustomer(this)">Payments</div>
            <div onclick="showMembershipsForCustomer()">Memberships</div>
            <div>Forms</div>
          </div>
          <div id="member-payment-details"></div>
          <table class="member-details-table">
            <tr>
              <th>Name</th>
              <td id="mpFieldName">oded kovach</td>
            </tr>
            <tr>
              <th>Account Management</th>
              <td>The customer manages this account</td>
            </tr>
            <tr>
              <th>Email</th>
              <td id="mpEmail">adam.stevens@unipaas.com</td>
            </tr>
            <tr>
              <th>Address</th>
              <td id="mpAddress">21 baker street London London, London, W1W 6XH, GB</td>
            </tr>
            <tr>
              <th>Phone</th>
              <td id="mpPhone">+972547674444</td>
            </tr>
            <tr>
              <th>Gender</th>
              <td id="mpGender">Male</td>
            </tr>
            <tr>
              <th>Date of birth</th>
              <td id="mpDOB">Jan. 7, 1988</td>
            </tr>
            <tr>
              <th>Emergency Contact Name</th>
              <td id="mpEmergencyContactName">George</td>
            </tr>
            <tr>
              <th>Emergency Contact Phone</th>
              <td id="mpEmergencyContactPhone">+97254545454</td>
            </tr>
            <tr>
              <th>Emergency Contact Relationship</th>
              <td id="mpEmergencyRelationship">oded</td>
            </tr>
          </table>
          <button class="back-to-list-btn" onclick="closeMemberProfile()">Back to Customer List</button>
        </div>
      </div>
      <div class="page-section" id="salesInvoices-section">
        <div class="page-title">
          <h1>Sales Invoices</h1>
          <button class="btn" style="margin: 1rem 0;" onclick="openInvoiceModal()">Create Invoice</button>
        </div>
        <div class="table-container"
          style="background: white; border-radius: 8px; box-shadow: 0 1px 3px rgba(0,0,0,0.1); padding: 1rem;">
          <table style="width:100%; border-collapse: collapse;">
            <thead style="background: #f9f9f9;">
              <tr>
                <th style="text-align:left; padding: 12px;">Invoice ID</th>
                <th style="text-align:left; padding: 12px;">Customer</th>
                <th style="text-align:left; padding: 12px;">Amount</th>
                <th style="text-align:left; padding: 12px;">Date</th>
                <th style="text-align:left; padding: 12px;">Due Date</th>
                <th style="text-align:left; padding: 12px;">Payment Status</th>
                <th style="text-align:left; padding: 12px;">Action</th>
              </tr>
            </thead>
            <tbody id="invoicesTableBody">
              <!-- Dynamic invoice rows will be inserted here -->
            </tbody>
          </table>
        </div>
      </div>
      <div class="page-section" id="managePlan-section">
        <div class="page-title">
          <h1>Manage Plans</h1>
          <p>Update or remove membership plans.</p>
        </div>
        <div class="table-container"
          style="background-color: var(--card-bg-color); border-radius: 8px; box-shadow: 0 1px 3px rgba(0,0,0,0.1); overflow: hidden;">
          <table style="width: 100%; border-collapse: collapse;">
            <thead style="background-color: var(--menu-bg-color);">
              <tr>
                <th style="padding: 12px; text-align: left; font-weight: 600;">Plan ID</th>
                <th style="padding: 12px; text-align: left; font-weight: 600;">Name</th>
                <th style="padding: 12px; text-align: left; font-weight: 600;">Description</th>
                <th style="padding: 12px; text-align: left; font-weight: 600;">Status</th>
                <th style="padding: 12px; text-align: left; font-weight: 600;">Actions</th>
              </tr>
            </thead>
            <tbody id="plansTableBody">
              <!-- Plan rows will be inserted dynamically -->
            </tbody>
          </table>
        </div>
      </div>
    </main>
  </div>
  <!-- FOOTER BANNER -->
  <div class="footer-banner">
    <p>Join Cashly Pay to get paid securely and enhance your customers payment experience</p>
    <button class="learn-more-btn" onclick="openOnboardingComponent()">Get Started</button>
  </div>
  <!-- ================= MODALS (except customer selector merged into store) ================= -->
  <!-- Vendor Selection Modal -->
  <div class="modal-backdrop" id="vendorSelectionModal">
    <div class="modal-content">
      <h2>Select a Vendor</h2>
      <select id="vendorSelect"></select>
      <button onclick="saveVendor()">Save Vendor</button>
      <button onclick="closeModal('vendorSelectionModal')">Close</button>
    </div>
  </div>
  <!-- Purchase Complete Modal -->
  <div class="modal-backdrop" id="purchaseCompleteModal">
    <div class="modal-content">
      <h2>Purchase Completed</h2>
      <p>Amount: <span id="completedAmount"></span></p>
      <p>Currency: <span id="completedCurrency"></span></p>
      <p>Reference: <span id="completedReference"></span></p>
      <button class="btn" onclick="closePurchaseCompleteModal()">Close</button>
    </div>
  </div>
  <!-- Settings Modal -->
  <div class="modal-backdrop" id="settingsModal">
    <div class="modal-content">
      <h2>Payment Settings</h2>
      
      <div class="form-group">
        <label for="accessTokenInput">API Access Token</label>
        <input id="accessTokenInput" type="text" value="bihXLAzIENTLuFY1pmWFcg==" />
      </div>
      
      <div class="form-group" style="display: flex; align-items: center;">
        <label for="zeroStateToggle" style="display: inline; margin-right: 10px;">Zero State Mode</label>
        <label class="toggle-switch" style="margin-bottom: 0;">
          <input id="zeroStateToggle" type="checkbox" />
          <span class="toggle-slider"></span>
        </label>
      </div>
      
      <div class="form-group">
        <span id="stateStatusLabel" style="display: block; margin: 0.5rem 0; color: #666;">Status: No vendor selected</span>
      </div>
      
      <div style-margin-top: 1rem;">
        <button onclick="saveAccessToken()" style="background-color: var(--secondary-color);">Save Settings</button>
        <button onclick="closeModal('settingsModal')" style="background-color: #6c757d;">Close</button>
      </div>
    </div>
  </div>
  <!-- Update Plan Modal -->
  <div class="modal-backdrop" id="updatePlanModal">
    <div class="modal-content">
      <h2>Update Plan</h2>
      <form id="updatePlanForm">
        <input id="updatePlanId" type="hidden" />
        <div>
          <label for="updatePlanName">Plan Name</label>
          <input id="updatePlanName" required="" type="text" />
        </div>
        <div>
          <label for="updatePlanDescription">Plan Description</label>
          <input id="updatePlanDescription" type="text" />
        </div>
        <div>
          <label for="updatePlanStatus">Plan Status</label>
          <input id="updatePlanStatus" type="text" />
        </div>
        <button type="submit">Update Plan</button>
      </form>
      <button onclick="closeModal('updatePlanModal')">Close</button>
    </div>
  </div>
  <!-- Register Plan Modal (placeholder) -->
  <div class="modal-backdrop" id="registerPlanModal">
    <div class="modal-content">
      <p>Register Plan Modal</p>
      <button onclick="closeModal('registerPlanModal')">Close</button>
    </div>
  </div>
  <!-- Operator QR Code Modal (placeholder) -->
  <div class="modal-backdrop" id="operatorQRCodeModal">
    <div class="modal-content">
      <p>Operator QR Code Modal</p>
      <button onclick="closeModal('operatorQRCodeModal')">Close</button>
    </div>
  </div>
  <!-- Onboarding Modal -->
  <div class="modal-backdrop" id="onboardingModal">
    <div class="modal-content" style="position: relative;">
      <button class="close-btn" onclick="closeOnboardingModal()"
        style="position: absolute; top: 10px; right: 10px; background: none; border: none; font-size: 20px; color: #666; cursor: pointer;">x</button>
      <div id="onboarding"></div>
    </div>
  </div>
  <!-- ===== NEW DESIGN QR MODALS ===== -->
  <!-- Update Payment Modal (Send Payment Link) -->
  <div class="modal-backdrop" id="updatePaymentModal">
    <div class="modal-content qr-modal">
      <button class="close-btn" onclick="closeModal('updatePaymentModal')">×</button>
      <h2>Send Payment Link to Customer</h2>
      <div class="button-row">
        <button class="action-btn disabled-btn">Send via Email</button>
        <button class="action-btn disabled-btn">Send via SMS</button>
      </div>
      <p class="qr-instructions">Use this QR code to access the checkout</p>
      <img alt="QR Code" class="qr-code" id="updatePaymentQRCode" src="" />
      <button class="copy-qr-btn" onclick="copyQRCode()">Open Link</button>
      <p class="payment-link-label">Payment Link:</p>
      <a class="payment-link-value" href="#" id="updatePaymentLink"
        onclick="openFloatingModal(this.href); return false;" target="_blank"></a>
    </div>
  </div>
  <!-- Mandate Modal (Send Mandate Link) -->
  <div class="modal-backdrop" id="mandateModal">
    <div class="modal-content qr-modal">
      <button class="close-btn" onclick="closeModal('mandateModal')">×</button>
      <h2>Collect Payment</h2>
      <div class="button-row">
        <button class="action-btn disabled-btn">Send via Email</button>
        <button class="action-btn disabled-btn">Send via SMS</button>
      </div>
      <p class="qr-instructions">Use this QR code to access the mandate</p>
      <img alt="Mandate QR Code" class="qr-code" id="mandateQRCode" src="" />
      <button class="copy-qr-btn" onclick="copyMandateQRCode()">Open Link</button>
      <p class="payment-link-label">Mandate Link:</p>
      <a class="payment-link-value" href="#" id="mandateLink" onclick="openFloatingModal(this.href); return false;"
        target="_blank"></a>
    </div>
  </div>
  <!-- Renew Plan Modal (Send Payment Link) -->
  <div class="modal-backdrop" id="renewPlanModal">
    <div class="modal-content qr-modal">
      <button class="close-btn" onclick="closeModal('renewPlanModal')">×</button>
      <h2>Send Payment Link to Customer</h2>
      <div id="renewalPlanSelection" style="display:none;"></div>
      <div class="button-row">
        <button class="action-btn disabled-btn">Send via Email</button>
        <button class="action-btn disabled-btn">Send via SMS</button>
      </div>
      <p class="qr-instructions">Use this QR code to access the checkout</p>
      <img alt="Renewal QR Code" class="qr-code" id="renewalQRCode" src="" />
      <button class="copy-qr-btn" onclick="copyQRCode()">Copy QR Code</button>
      <p class="payment-link-label">Payment Link:</p>
      <a class="payment-link-value" href="#" id="renewalPaymentLink"
        onclick="openFloatingModal(this.href); return false;" target="_blank"></a>
      <div id="renewalPlanDetails" style="display:none;"></div>
    </div>
  </div>
  <!-- ===== UPDATED MODAL: Payment Option Modal with Tabs ===== -->
  <div class="modal-backdrop" id="paymentOptionModal">
    <div class="modal-content" style="width: 500px; max-width: 95%; padding: 1.5rem;">
      <button class="close-btn" onclick="closeModal('paymentOptionModal')" style="position: absolute; top: 15px; right: 15px; background: none; border: none; font-size: 20px; color: #666; cursor: pointer;">×</button>
      
      <h2 style="margin-top: 0; margin-bottom: 1.5rem; text-align: center; font-size: 1.4rem;">Collect Payment</h2>
      
      <div style="margin-bottom: 1.5rem;">
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1.2rem;">
          <div style="flex: 2; margin-right: 1rem;">
            <label for="modalProductSelect" style="display: block; margin-bottom: 0.5rem; font-weight: 500; font-size: 1rem;">Product</label>
            <select id="modalProductSelect" onchange="updateModalProductAmount()" style="width: 100%; padding: 0.6rem; border: 1px solid #ddd; border-radius: 4px; font-size: 0.95rem;">
              <option data-name="Yoga Class" value="15.00">Yoga Class</option>
              <option data-name="Protein Shake" value="25.00">Protein Shake</option>
              <option data-name="Yoga Mat" value="12.00">Yoga Mat</option>
            </select>
          </div>
          <div style="flex: 1;">
            <label for="modalAmountInput" style="display: block; margin-bottom: 0.5rem; font-weight: 500; font-size: 1rem;">Amount (£)</label>
            <input id="modalAmountInput" style="width: 100%; padding: 0.6rem; border: 1px solid #ddd; border-radius: 4px; font-size: 0.95rem;" type="text" value="15.00" />
          </div>
        </div>
        
        <div style="margin-bottom: 1rem;">
          <label style="display: block; margin-bottom: 0.5rem; font-weight: 500;">Customer</label>
          <select id="customerSelect" onchange="updateSavedCardInfo()" style="width: 100%; padding: 0.5rem; border: 1px solid #ddd; border-radius: 4px;">
            <option value="john">John Mitch (john.mitch@gmail.com)</option>
            <option value="oded">Oded Kovach (oded.kovach@gmail.com)</option>
          </select>
        </div>
      </div>
      
      <!-- Payment Method Tabs -->
      <div style="margin-bottom: 1.5rem;">
        <label style="display: block; margin-bottom: 1rem; font-weight: 500; font-size: 1.05rem;">Payment Method</label>
        <div class="payment-tabs" style="display: flex; border-bottom: 1px solid #ddd; gap: 10px;">
          <div class="payment-tab active" data-tab="terminal" onclick="switchPaymentTab(this, 'terminal')" 
               style="flex: 1; text-align: center; padding: 0.75rem 0; cursor: pointer; font-weight: 500; border-bottom: 2px solid var(--primary-color);">
            <i class="fa-solid fa-cash-register" style="display: block; font-size: 1.2rem; margin-bottom: 8px;"></i>
            Terminal
          </div>
          <div class="payment-tab" data-tab="saved-card" onclick="switchPaymentTab(this, 'saved-card')" 
               style="flex: 1; text-align: center; padding: 0.75rem 0; cursor: pointer; font-weight: 500;">
            <i class="fa-solid fa-credit-card" style="display: block; font-size: 1.2rem; margin-bottom: 8px;"></i>
            Saved Card
          </div>
          <div class="payment-tab" data-tab="online" onclick="switchPaymentTab(this, 'online')" 
               style="flex: 1; text-align: center; padding: 0.75rem 0; cursor: pointer; font-weight: 500;">
            <i class="fa-solid fa-globe" style="display: block; font-size: 1.2rem; margin-bottom: 8px;"></i>
            Online
          </div>
          <div class="payment-tab" data-tab="direct-debit" onclick="switchPaymentTab(this, 'direct-debit')" 
               style="flex: 1; text-align: center; padding: 0.75rem 0; cursor: pointer; font-weight: 500;">
            <i class="fa-solid fa-university" style="display: block; font-size: 1.2rem; margin-bottom: 8px;"></i>
            Direct Debit
          </div>
        </div>
        
        <!-- Tab Content -->
        <div class="tab-content" style="padding-top: 1.2rem;">
          <!-- Terminal Tab (active by default) -->
          <div id="terminal-tab" class="tab-pane active" style="display: block;">
            <p style="margin-bottom: 1rem; color: #666; font-size: 0.95rem;">Process payment using a card terminal device.</p>
          </div>
          
          <!-- Saved Card Tab -->
          <div id="saved-card-tab" class="tab-pane" style="display: none;">
            <p style="margin-bottom: 1rem; color: #666; font-size: 0.95rem;">Charge the customer's saved card on file.</p>
            <div id="saved-card-info" style="background: #f9f9f9; padding: 0.75rem; border-radius: 4px; display: flex; align-items: center; margin-bottom: 1rem;">
              <i class="fa-solid fa-credit-card" style="margin-right: 0.75rem; font-size: 1.2rem; color: #555;"></i>
              <div>
                <div id="card-type-number" style="font-weight: 500; font-size: 1rem;">Visa ending in 4436</div>
                <div id="card-expiry" style="font-size: 0.9rem; color: #777;">Expires 04/28</div>
              </div>
            </div>
          </div>
          
          <!-- Online Tab (renamed from Checkout) -->
          <div id="online-tab" class="tab-pane" style="display: none;">
            <p style="margin-bottom: 1rem; color: #666; font-size: 0.95rem;">Send an online payment link to the customer.</p>
            <div style="margin-bottom: 1rem;">
              <div style="margin-bottom: 0.5rem;">
                <label style="display: flex; align-items: center; margin-bottom: 0.5rem; font-size: 0.95rem;">
                  <input type="checkbox" id="checkoutOptionCards" checked style="margin-right: 0.5rem;"> 
                  <span>Cards</span>
                  <i class="fa-solid fa-credit-card" style="margin-left: 0.5rem; color: #555;"></i>
                </label>
              </div>
              <div>
                <label style="display: flex; align-items: center; font-size: 0.95rem;">
                  <input type="checkbox" id="checkoutOptionOpenBanking" checked style="margin-right: 0.5rem;"> 
                  <span>Instant Bank Transfer</span>
                  <i class="fa-solid fa-university" style="margin-left: 0.5rem; color: #555;"></i>
                </label>
              </div>
            </div>
          </div>
          
          <!-- Direct Debit Tab (new) -->
          <div id="direct-debit-tab" class="tab-pane" style="display: none;">
            <p style="margin-bottom: 1rem; color: #666; font-size: 0.95rem;">Set up a direct debit mandate for the customer.</p>
            <div style="background: #f9f9f9; padding: 0.75rem; border-radius: 4px; margin-bottom: 1rem;">
              <p style="margin-bottom: 0.5rem; font-weight: 500; font-size: 0.95rem;">Direct Debit Information</p>
              <p style="font-size: 0.9rem; color: #555;">This will send a mandate request to the customer to authorize future payments.</p>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Action Button -->
      <button id="paymentActionButton" onclick="onPayWithTerminbalClick('terminalPaymentModal')" 
              style="width: 100%; padding: 0.75rem; background-color: var(--primary-color); color: white; border: none; border-radius: 4px; font-size: 1.05rem; font-weight: 500; cursor: pointer;">
        Pay by Terminal
      </button>
    </div>
  </div>
  <!-- ===== NEW FLOATING PREVIEW MODAL (iPhone 12 size) ===== -->
  <div class="floating-modal" id="floatingPreviewModal">
    <div class="floating-modal-content">
      <button class="floating-close-btn" onclick="closeFloatingModal()">×</button>
      <iframe id="previewIframe" src=""></iframe>
    </div>
  </div>
  <!-- Add loading spinner overlay HTML after the floating preview modal -->
  <div id="loadingOverlay" class="loading-overlay">
    <div class="loading-container">
      <div class="simple-spinner"></div>
      <p>Loading onboarding...</p>
    </div>
  </div>
  <script>
    /* ---------------- JavaScript Section ---------------- */
    let savedToken = "bihXLAzIENTLuFY1pmWFcg==";
    let globalVendorId = null;
    let uniPaasComponents = null;
    let currentMemberRow = null;
    let checkoutStatusTimer = null;
    let isDashboardPayment = false; // flag to track if payment initiated from dashboard
    let invoices = []; // Array to store created invoices
    let currentInvoiceId = null; // To track the currently viewed invoice
    let successPaymentTimeout = null;

    const unipaasDefaultConfig = {
      paymentsEnabled: true,
      theme: {
        colors: {
          primaryColor: "#00BFA5",
          secondaryColor: "#f0f0f0",
          accentTextColor: "#333",
          primaryButtonColor: "#00BFA5"
        },
        fontFamily: "inherit",
        boxShadow: "0px 3px 15px rgba(0,0,0,0.1)"
      }
    };

    // Set today's date for the invoice form
    window.addEventListener('DOMContentLoaded', () => {
      const today = new Date();
      const formattedDate = today.toISOString().substr(0, 10);
      document.getElementById('invoiceDate').value = formattedDate;
      showTab('dashboard');
      loadPayPortal();
      loadBalance();
      updateInvoiceTotal(); // Initialize the totals to 0
      
      // Add dummy invoices
      createDummyInvoices();
    });

    // Create dummy invoices for the table
    function createDummyInvoices() {
      // Clear existing invoices
      invoices = [];
      
      // Get today's date in 2025
      const today = new Date();
      today.setFullYear(2025);
      
      // Create dates for invoices
      const createDateString = (date) => {
        return `${date.getDate().toString().padStart(2, '0')}/${(date.getMonth() + 1).toString().padStart(2, '0')}/${date.getFullYear()}`;
      };
      
      // Generate 10 dummy invoices
      const dummyInvoices = [
        {
          id: 'INV-001',
          customer: 'Oded Kovach',
          customerEmail: 'oded.kovach@gmail.com',
          amount: '250.00',
          date: createDateString(new Date(2025, 0, 15)), // Jan 15, 2025
          dueDate: createDateString(new Date(2025, 0, 29)), // Jan 29, 2025
          status: 'Paid'
        },
        {
          id: 'INV-002',
          customer: 'John Mitch',
          customerEmail: 'john.mitch@gmail.com',
          amount: '175.50',
          date: createDateString(new Date(2025, 0, 20)), // Jan 20, 2025
          dueDate: createDateString(new Date(2025, 1, 3)), // Feb 3, 2025
          status: 'Unpaid'
        },
        {
          id: 'INV-003',
          customer: 'Sarah Johnson',
          customerEmail: 'sjohnson@example.com',
          amount: '320.75',
          date: createDateString(new Date(2025, 0, 25)), // Jan 25, 2025
          dueDate: createDateString(new Date(2025, 1, 8)), // Feb 8, 2025
          status: 'Paid'
        },
        {
          id: 'INV-004',
          customer: 'David Williams',
          customerEmail: 'dwilliams@example.com',
          amount: '99.99',
          date: createDateString(new Date(2025, 1, 5)), // Feb 5, 2025
          dueDate: createDateString(new Date(2025, 1, 19)), // Feb 19, 2025
          status: 'Unpaid'
        },
        {
          id: 'INV-005',
          customer: 'Emma Thompson',
          customerEmail: 'ethompson@example.com',
          amount: '450.00',
          date: createDateString(new Date(2025, 1, 10)), // Feb 10, 2025
          dueDate: createDateString(new Date(2025, 1, 24)), // Feb 24, 2025
          status: 'Paid'
        },
        {
          id: 'INV-006',
          customer: 'Michael Brown',
          customerEmail: 'mbrown@example.com',
          amount: '199.50',
          date: createDateString(new Date(2025, 1, 15)), // Feb 15, 2025
          dueDate: createDateString(new Date(2025, 0, 8)), // Jan 8, 2025 (OVERDUE)
          status: 'Unpaid'
        },
        {
          id: 'INV-007',
          customer: 'Jessica Lee',
          customerEmail: 'jlee@example.com',
          amount: '275.25',
          date: createDateString(new Date(2025, 1, 20)), // Feb 20, 2025
          dueDate: createDateString(new Date(2025, 2, 6)), // Mar 6, 2025
          status: 'Paid'
        },
        {
          id: 'INV-008',
          customer: 'Robert Garcia',
          customerEmail: 'rgarcia@example.com',
          amount: '150.00',
          date: createDateString(new Date(2025, 1, 25)), // Feb 25, 2025
          dueDate: createDateString(new Date(2025, 0, 20)), // Jan 20, 2025 (OVERDUE)
          status: 'Unpaid'
        },
        {
          id: 'INV-009',
          customer: 'Jennifer Wilson',
          customerEmail: 'jwilson@example.com',
          amount: '399.99',
          date: createDateString(new Date(2025, 2, 5)), // Mar 5, 2025
          dueDate: createDateString(new Date(2025, 2, 19)), // Mar 19, 2025
          status: 'Paid'
        },
        {
          id: 'INV-010',
          customer: 'Chris Anderson',
          customerEmail: 'canderson@example.com',
          amount: '225.50',
          date: createDateString(new Date(2025, 2, 10)), // Mar 10, 2025
          dueDate: createDateString(new Date(2025, 2, 24)), // Mar 24, 2025
          status: 'Unpaid'
        }
      ];
      
      // Add each invoice to the invoices array with necessary details
      dummyInvoices.forEach(inv => {
        const invoice = {
          id: inv.id,
          type: 'Invoice',
          customer: inv.customer,
          customerEmail: inv.customerEmail,
          date: inv.date,
          dueDate: inv.dueDate,
          items: [
            {
              description: 'Monthly Subscription',
              quantity: 1,
              price: inv.amount,
              total: inv.amount
            }
          ],
          subtotal: inv.amount,
          tax: (parseFloat(inv.amount) * 0.2).toFixed(2),
          total: (parseFloat(inv.amount) * 1.2).toFixed(2),
          notes: 'Thank you for your business!',
          status: inv.status
        };
        
        invoices.push(invoice);
      });
      
      // Update the invoices table
      updateInvoicesTable();
    }

    // Open invoice creation modal
    function openInvoiceModal() {
      // Reset form
      document.getElementById('invoiceCustomer').value = '';

      // Reset items to just one empty row
      const itemsContainer = document.getElementById('invoiceItemsContainer');
      itemsContainer.innerHTML = `
        <div class="invoice-item" style="display: flex; gap: 0.5rem; margin-bottom: 0.5rem; align-items: center;">
          <input type="text" placeholder="Item description" style="flex: 3; padding: 0.5rem; border: 1px solid #ccc; border-radius: 4px;" class="item-desc">
          <input type="number" min="1" value="1" style="flex: 1; padding: 0.5rem; border: 1px solid #ccc; border-radius: 4px;" class="item-qty">
          <input type="number" min="0" step="0.01" placeholder="0.00" style="flex: 1; padding: 0.5rem; border: 1px solid #ccc; border-radius: 4px;" class="item-price">
          <button type="button" onclick="removeInvoiceItem(this)" style="background: #f44336; color: white; border: none; border-radius: 4px; padding: 0.5rem 0.8rem;">×</button>
        </div>
      `;

      // Reset notes
      document.getElementById('invoiceNotes').value = '';

      // Reset totals
      updateInvoiceTotal();

      // Set to invoice by default
      document.querySelector('input[name="documentType"][value="invoice"]').checked = true;
      toggleDocumentType();

      // Open the modal
      openModal('invoiceModal');

      // Add event listeners to all price and qty inputs
      setupItemListeners();
    }

    // Toggle between invoice and estimate
    function toggleDocumentType() {
      const isInvoice = document.querySelector('input[name="documentType"]:checked').value === 'invoice';
      const saveBtn = document.getElementById('saveInvoiceBtn');
      saveBtn.textContent = isInvoice ? 'Create Invoice' : 'Create Estimate';
    }

    // Add a new item row to the invoice form
    function addInvoiceItem() {
      const container = document.getElementById('invoiceItemsContainer');
      const newItem = document.createElement('div');
      newItem.className = 'invoice-item';
      newItem.style = 'display: flex; gap: 0.5rem; margin-bottom: 0.5rem; align-items: center;';
      newItem.innerHTML = `
        <input type="text" placeholder="Item description" style="flex: 3; padding: 0.5rem; border: 1px solid #ccc; border-radius: 4px;" class="item-desc">
        <input type="number" min="1" value="1" style="flex: 1; padding: 0.5rem; border: 1px solid #ccc; border-radius: 4px;" class="item-qty">
        <input type="number" min="0" step="0.01" placeholder="0.00" style="flex: 1; padding: 0.5rem; border: 1px solid #ccc; border-radius: 4px;" class="item-price">
        <button type="button" onclick="removeInvoiceItem(this)" style="background: #f44336; color: white; border: none; border-radius: 4px; padding: 0.5rem 0.8rem;">×</button>
      `;
      container.appendChild(newItem);

      // Add event listeners to the new item's inputs
      setupItemListeners();
    }

    // Remove an item row from the invoice form
    function removeInvoiceItem(button) {
      const container = document.getElementById('invoiceItemsContainer');
      // Only remove if there's more than one item
      if (container.children.length > 1) {
        const item = button.parentElement;
        container.removeChild(item);
        updateInvoiceTotal();
      } else {
        // Just clear the values if it's the last item
        const item = button.parentElement;
        item.querySelector('.item-desc').value = '';
        item.querySelector('.item-qty').value = 1;
        item.querySelector('.item-price').value = '';
        updateInvoiceTotal();
      }
    }

    // Setup event listeners for all item quantity and price inputs
    function setupItemListeners() {
      const items = document.querySelectorAll('.invoice-item');
      items.forEach(item => {
        const qtyInput = item.querySelector('.item-qty');
        const priceInput = item.querySelector('.item-price');

        qtyInput.addEventListener('input', updateInvoiceTotal);
        priceInput.addEventListener('input', updateInvoiceTotal);
      });
    }

    // Update invoice totals based on items
    function updateInvoiceTotal() {
      const items = document.querySelectorAll('.invoice-item');
      let subtotal = 0;

      items.forEach(item => {
        const qty = parseFloat(item.querySelector('.item-qty').value) || 0;
        const price = parseFloat(item.querySelector('.item-price').value) || 0;
        subtotal += qty * price;
      });

      const tax = subtotal * 0.2; // 20% tax
      const total = subtotal + tax;

      document.getElementById('invoiceSubtotal').textContent = subtotal.toFixed(2);
      document.getElementById('invoiceTax').textContent = tax.toFixed(2);
      document.getElementById('invoiceTotal').textContent = total.toFixed(2);
    }

    // Save the invoice/estimate
    function saveInvoice() {
      // Validate required fields
      const customer = document.getElementById('invoiceCustomer').value;
      if (!customer) {
        alert('Please select a customer');
        return;
      }

      const date = document.getElementById('invoiceDate').value;
      if (!date) {
        alert('Please select a date');
        return;
      }

      // Validate items
      const items = document.querySelectorAll('.invoice-item');
      let hasValidItems = false;
      const itemsArray = [];

      items.forEach(item => {
        const desc = item.querySelector('.item-desc').value;
        const qty = parseFloat(item.querySelector('.item-qty').value) || 0;
        const price = parseFloat(item.querySelector('.item-price').value) || 0;

        if (desc && qty > 0 && price > 0) {
          hasValidItems = true;
          itemsArray.push({
            description: desc,
            quantity: qty,
            price: price,
            total: (qty * price).toFixed(2)
          });
        }
      });

      if (!hasValidItems) {
        alert('Please add at least one valid item with description, quantity, and price');
        return;
      }

      // Create invoice object
      const isInvoice = document.querySelector('input[name="documentType"]:checked').value === 'invoice';
      const docType = isInvoice ? 'Invoice' : 'Estimate';
      const invoiceNumber = generateInvoiceNumber(isInvoice);

      const subtotal = parseFloat(document.getElementById('invoiceSubtotal').textContent);
      const tax = parseFloat(document.getElementById('invoiceTax').textContent);
      const total = parseFloat(document.getElementById('invoiceTotal').textContent);
      const notes = document.getElementById('invoiceNotes').value;

      // Get customer details
      const customerDetails = getCustomerDetails(customer);

      // Create invoice object
      const invoice = {
        id: invoiceNumber,
        type: docType,
        customer: customerDetails.name,
        customerEmail: customerDetails.email,
        date: formatDate(date),
        dueDate: calculateDueDate(date, 14), // 14 days due date
        items: itemsArray,
        subtotal: subtotal.toFixed(2),
        tax: tax.toFixed(2),
        total: total.toFixed(2),
        notes: notes || 'Thank you for your business!',
        status: isInvoice ? 'Unpaid' : 'Draft'
      };

      // Add to invoices array
      invoices.push(invoice);

      // Close invoice modal
      closeModal('invoiceModal');

      // Show the newly created invoice
      viewInvoice(invoiceNumber);

      // Update the invoices table
      updateInvoicesTable();
    }

    // Generate a sequential invoice/estimate number
    function generateInvoiceNumber(isInvoice) {
      const prefix = isInvoice ? 'INV-' : 'EST-';
      const invoicesOfType = invoices.filter(inv => inv.id.startsWith(prefix));
      const num = invoicesOfType.length + 1;
      return prefix + num.toString().padStart(3, '0');
    }

    // Get customer details from selected value
    function getCustomerDetails(customerId) {
      const customers = {
        'oded': {
          name: 'Oded Kovach',
          email: 'adam.stevens@unipaas.com'
        },
        'john': {
          name: 'John Mitch',
          email: 'john.mitch@gmail.com'
        }
      };

      return customers[customerId] || { name: 'Unknown Customer', email: 'unknown@example.com' };
    }

    // Format date as DD/MM/YYYY
    function formatDate(dateString) {
      const date = new Date(dateString);
      return date.toLocaleDateString('en-GB');
    }

    // Calculate due date (adding days to a date)
    function calculateDueDate(dateString, daysToAdd) {
      const date = new Date(dateString);
      date.setDate(date.getDate() + daysToAdd);
      return date.toLocaleDateString('en-GB');
    }

    // View invoice details in modal
    function viewInvoice(invoiceId) {
      const invoice = invoices.find(inv => inv.id === invoiceId);
      if (!invoice) return;

      currentInvoiceId = invoiceId;

      // Set invoice title
      document.getElementById('viewInvoiceTitle').textContent = `${invoice.type} #${invoice.id}`;

      // Set status with appropriate color
      const statusElem = document.getElementById('viewInvoiceStatus');
      statusElem.textContent = invoice.status;

      if (invoice.status === 'Paid') {
        statusElem.style.background = '#4caf50';
      } else if (invoice.status === 'Unpaid') {
        statusElem.style.background = '#ff9800';
      } else {
        statusElem.style.background = '#2196f3';
      }

      // Set customer details
      document.getElementById('viewInvoiceCustomer').textContent = invoice.customer;
      document.getElementById('viewInvoiceCustomerEmail').textContent = invoice.customerEmail;

      // Set dates
      document.getElementById('viewInvoiceDate').textContent = invoice.date;
      document.getElementById('viewInvoiceDueDate').textContent = invoice.dueDate;

      // Populate items
      const itemsContainer = document.getElementById('viewInvoiceItems');
      itemsContainer.innerHTML = '';

      invoice.items.forEach(item => {
        const row = document.createElement('tr');
        row.innerHTML = `
          <td style="padding: 0.8rem; text-align: left; border-bottom: 1px solid #eee;">${item.description}</td>
          <td style="padding: 0.8rem; text-align: center; border-bottom: 1px solid #eee;">${item.quantity}</td>
          <td style="padding: 0.8rem; text-align: right; border-bottom: 1px solid #eee;">£${item.price}</td>
          <td style="padding: 0.8rem; text-align: right; border-bottom: 1px solid #eee;">£${item.total}</td>
        `;
        itemsContainer.appendChild(row);
      });

      // Set totals
      document.getElementById('viewInvoiceSubtotal').textContent = invoice.subtotal;
      document.getElementById('viewInvoiceTax').textContent = invoice.tax;
      document.getElementById('viewInvoiceTotal').textContent = invoice.total;

      // Set notes
      document.getElementById('viewInvoiceNotes').textContent = invoice.notes;

      // Open the modal
      openModal('invoiceViewModal');
    }

    // Update the invoices table in the sales invoices section
    function updateInvoicesTable() {
      const tableBody = document.getElementById('invoicesTableBody');
      if (!tableBody) return;

      tableBody.innerHTML = '';

      // Sort invoices by date (newest first)
      const sortedInvoices = [...invoices].sort((a, b) => {
        const dateA = new Date(a.date.split('/').reverse().join('-'));
        const dateB = new Date(b.date.split('/').reverse().join('-'));
        return dateB - dateA;
      });

      sortedInvoices.forEach(invoice => {
        if (invoice.type === 'Invoice') { // Only show invoices, not estimates
          const row = document.createElement('tr');

          const statusColor = invoice.status === 'Paid' ?
            'color: #4caf50; font-weight: bold;' :
            'color: #ff9800; font-weight: bold;';
            
          // Check if invoice is overdue
          const today = new Date();
          today.setFullYear(2025); // Use 2025 as the current year for comparison
          const dueDate = new Date(invoice.dueDate.split('/').reverse().join('-'));
          const isOverdue = today > dueDate && invoice.status !== 'Paid';
          
          const dueDateStyle = isOverdue ? 
            'padding: 12px; border-bottom: 1px solid #eee; background-color: #ffebee; color: #d32f2f; font-weight: bold;' : 
            'padding: 12px; border-bottom: 1px solid #eee;';

          row.innerHTML = `
            <td style="padding: 12px; border-bottom: 1px solid #eee;">
              <a href="#" onclick="viewInvoice('${invoice.id}'); return false;" style="color: var(--primary-color); text-decoration: underline;">
                ${invoice.id}
              </a>
            </td>
            <td style="padding: 12px; border-bottom: 1px solid #eee;">${invoice.customer}</td>
            <td style="padding: 12px; border-bottom: 1px solid #eee;">£${invoice.total}</td>
            <td style="padding: 12px; border-bottom: 1px solid #eee;">${invoice.date}</td>
            <td style="${dueDateStyle}">${invoice.dueDate}${isOverdue ? ' (OVERDUE)' : ''}</td>
            <td style="padding: 12px; border-bottom: 1px solid #eee; ${statusColor}">${invoice.status}</td>
            <td style="padding: 12px; border-bottom: 1px solid #eee;">
              <button class="btn btn-sm" onclick="viewInvoice('${invoice.id}')">View</button>
              ${invoice.status !== 'Paid' ?
              `<button class="btn btn-sm" style="margin-left: 0.5rem; background: var(--secondary-color);" onclick="collectPaymentForInvoice('${invoice.id}')">Collect</button>` :
              ''}
            </td>
          `;

          tableBody.appendChild(row);
        }
      });
    }

    // Invoice action functions
    function printInvoice() {
      alert('Printing invoice...');
      // In a real implementation, this would prepare the document for printing
    }

    function downloadPDF() {
      alert('Downloading invoice as PDF...');
      // In a real implementation, this would generate and download a PDF
    }

    function sendInvoiceEmail() {
      alert('Sending invoice via email...');
      // In a real implementation, this would send the invoice via email
    }

    function collectPayment() {
      if (!currentInvoiceId) return;
      collectPaymentForInvoice(currentInvoiceId);
    }

    function collectPaymentForInvoice(invoiceId) {
      const invoice = invoices.find(inv => inv.id === invoiceId);
      if (!invoice) return;

      // Store current invoice ID globally for terminal payment reference
      currentInvoiceId = invoiceId;

      // Close the invoice view if open
      closeModal('invoiceViewModal');

      // Open payment modal
      const modal = document.getElementById('paymentOptionModal');

      // Set the amount to the invoice total
      document.getElementById('modalAmountInput').value = invoice.total;

      // Set the customer
      const customerNameTag = document.querySelector('.customer-name-tag');
      const customerEmailTag = document.querySelector('.customer-email-tag');

      if (customerNameTag && customerEmailTag) {
        customerNameTag.textContent = invoice.customer;
        customerEmailTag.textContent = invoice.customerEmail;
      }

      // Open the modal
      openModal('paymentOptionModal');

      // Set up a callback for when payment is complete
      window.onInvoicePaid = function () {
        // Mark invoice as paid
        invoice.status = 'Paid';

        // Update invoices table
        updateInvoicesTable();

        // Update the status in the view modal if it's reopened
        const statusElem = document.getElementById('viewInvoiceStatus');
        if (statusElem) {
          statusElem.textContent = 'Paid';
          statusElem.style.background = '#4caf50';
        }
      };

      // Modify the existing purchase complete modal close function
      window.originalClosePurchaseCompleteModal = window.closePurchaseCompleteModal;
      window.closePurchaseCompleteModal = function () {
        window.originalClosePurchaseCompleteModal();
        if (window.onInvoicePaid) {
          window.onInvoicePaid();
          window.onInvoicePaid = null;
        }
      };
    }

    function getApiHeaders() {
      return {
        "Accept": "application/json",
        "Content-Type": "application/json",
        "Authorization": "Bearer " + savedToken


      };
    }

    /* Toggle plan submenu */
    function togglePlanSubmenu(event) {
      event.preventDefault();
      const sub = document.getElementById('planSubmenu');
      sub.style.display = (sub.style.display === 'none' ? 'block' : 'none');
    }

    /* Toggle HIM Vendor Functionality */
    function toggleHIMVendor(checkbox) {
      if (checkbox.checked) {
        globalVendorId = "67be052d378501254f315979";
        document.querySelector('.footer-banner').style.display = "none";
      } else {
        globalVendorId = null;
        document.querySelector('.footer-banner').style.display = "flex";
      }
      loadPayPortal();
      loadBalance();
    }

    /* Show Tab */
    function showTab(tab) {
      // hide all sections
      document.querySelectorAll('.page-section').forEach(el => {
        el.style.display = 'none';
      });

      // show only the one we want
      const target = document.getElementById(tab + '-section');
      if (target) target.style.display = 'block';

      if (tab === 'reports') {
        loadPayPortal();
      }
      if (tab === 'managePlan') {
        loadManagePlans();
      }
      if (tab === 'salesInvoices') {
        updateInvoicesTable();
      }
      if (tab === 'settings') {
        const settingsSection = document.getElementById('settings-section');
        const settingsModal = document.getElementById('settingsModal');
        
        // Move the modal to the settings section if it's not already there
        if (settingsModal.parentElement.id !== 'settings-section') {
          settingsSection.appendChild(settingsModal);
        }
        
        // Apply inline styles
        settingsModal.classList.remove('modal-backdrop');
        settingsModal.classList.add('inline');
        settingsModal.style.position = 'static';
        settingsModal.style.display = 'block';
        
        // Style the content for inline display
        const modalContent = settingsModal.querySelector('.modal-content');
        if (modalContent) {
          modalContent.classList.add('inline-settings');
        }
        
        // Hide the close button
        const closeBtn = settingsModal.querySelector('button[onclick="closeModal(\'settingsModal\')"]');
        if (closeBtn) { 
          closeBtn.style.display = 'none'; 
        }
        
        // Hide the "Open Payment Settings" button as it's redundant
        const btn = settingsSection.querySelector('button.btn');
        if (btn) { 
          btn.style.display = 'none'; 
        }
        
        // Set the token input value
        document.getElementById('accessTokenInput').value = savedToken;
        
        // Update the status label
        const statusLabel = document.getElementById('stateStatusLabel');
        if (statusLabel) {
          if (globalVendorId) {
            statusLabel.textContent = "Status: Using vendor ID " + globalVendorId;
          } else {
            statusLabel.textContent = "Status: Zero state (no vendor selected)";
          }
        }
      }
    }

    /* ---------- Member Profile ---------- */
    function openMemberProfile(
      fullName, joinedDate, email, address, phone, gender, dob, emName, emPhone, emRelation
    ) {
      document.getElementById('members-section').style.display = 'none';
      document.getElementById('member-profile-section').style.display = 'block';

      document.getElementById('mpName').textContent = fullName;
      document.getElementById('mpJoined').textContent = joinedDate;
      document.getElementById('mpFieldName').textContent = fullName;
      document.getElementById('mpEmail').textContent = email;
      document.getElementById('mpAddress').textContent = address;
      document.getElementById('mpPhone').textContent = phone;
      document.getElementById('mpGender').textContent = gender;
      document.getElementById('mpDOB').textContent = dob;
      document.getElementById('mpEmergencyContactName').textContent = emName;
      document.getElementById('mpEmergencyContactPhone').textContent = emPhone;
      document.getElementById('mpEmergencyRelationship').textContent = emRelation;

      const initials = fullName.split(" ")
        .map(n => n.charAt(0).toUpperCase())
        .join("");
      document.getElementById('mpAvatar').textContent = initials;
    }

    function closeMemberProfile() {
      document.getElementById('member-profile-section').style.display = 'none';
      document.getElementById('members-section').style.display = 'block';
      document.getElementById('member-payment-details').innerHTML = "";
      const detailsTable = document.querySelector("#member-profile-section .member-details-table");
      if (detailsTable) {
        detailsTable.style.display = "table";
      }
    }

    /* Payment Tab: Hide personal details & show payment table */
    function showPaymentDetailsForCustomer(button) {
      const detailsTable = document.querySelector("#member-profile-section .member-details-table");
      if (detailsTable) detailsTable.style.display = "none";

      const container = document.getElementById('member-payment-details');
      const name = document.getElementById('mpName').textContent;
      const email = document.getElementById('mpEmail').textContent;

      container.innerHTML =
        `<table class="payment-method-table">
          <thead>
            <tr>
              <th>Card</th>
              <th>Expiration</th>
              <th>Action</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td><span class="visa-logo"></span> ****4436</td>
              <td>04/25</td>
              <td>
                <button class="btn" onclick="updatePaymentMethodForMember(this)">Update</button>
                <button class="btn" style="margin-left:0.5rem;" onclick="openSendMandateModal('${name}','${email}')">Send Mandate</button>
              </td>
            </tr>
          </tbody>
        </table>`;
    }

    function showMembershipsForCustomer() {
      const detailsTable = document.querySelector("#member-profile-section .member-details-table");
      if (detailsTable) detailsTable.style.display = "none";
      const container = document.getElementById('member-payment-details');
      container.innerHTML = "<h3>Available Plans</h3><div id='plansList'></div>";

      fetch("https://sandbox.unipaas.com/platform/pay-ins/plans", {
        method: "GET",
        headers: getApiHeaders()
      })
        .then(res => res.json())
        .then(data => {
          let plans = [];
          if (Array.isArray(data)) {
            plans = data.length > 0 && data[0].items ? data[0].items : data;
          } else if (data.items) {
            plans = data.items;
          }
          const plansListDiv = document.getElementById('plansList');
          if (!plansListDiv) return;
          plansListDiv.innerHTML = "";

          plans.forEach(plan => {
            const div = document.createElement('div');
            div.style.padding = "0.5rem";
            div.style.marginBottom = "0.5rem";
            div.style.cursor = "pointer";
            div.style.backgroundColor = "#f5f5f5";
            div.style.borderRadius = "4px";
            div.textContent = `${plan.name || 'Plan'} - £${plan.price || 0}`;
            div.onclick = () => {
              checkoutRenew(plan.id, plan.price || 0, plan.currency || "GBP");
              const modal = document.getElementById('renewPlanModal');
              modal.classList.add('active');
              modal.style.display = 'flex';
            };
            plansListDiv.appendChild(div);
          });
        })
        .catch(e => console.error(e));
    }

    /* ---------- Mandate Flow ---------- */
    function openSendMandateModal(consumerName, consumerEmail) {
      const modal = document.getElementById('mandateModal');
      modal.classList.add('active');
      modal.style.display = 'flex';
      document.getElementById('mandateLink').textContent = '';
      document.getElementById('mandateLink').href = '#';
      document.getElementById('mandateQRCode').src = '';
      sendMandate(consumerName, consumerEmail);
    }

    function sendMandate(cName, cEmail) {
      if (!globalVendorId) {
        alert("No vendor selected. Please configure a vendor first!");
        return;
      }
      const payload = {
        consumer: {
          name: cName || "Member Name",
          email: cEmail || "member@example.com",
          reference: "member-" + Date.now()
        },
        createMandateLink: true
      };
      fetch(`https://sandbox.unipaas.com/platform/vendors/${globalVendorId}/mandates`, {
        method: "POST",
        headers: getApiHeaders(),
        body: JSON.stringify(payload)
      })
        .then(r => {
          if (!r.ok) throw new Error("Error, status=" + r.status);
          return r.json();
        })
        .then(data => {
          const link = data.link.url;
          document.getElementById('mandateLink').textContent = link;
          document.getElementById('mandateLink').href = link;
          document.getElementById('mandateQRCode').src =
            "https://api.qrserver.com/v1/create-qr-code/?size=150x150&data=" + encodeURIComponent(link);
        })
        .catch(e => console.error("sendMandate error:", e));
    }
    function copyMandateQRCode() {
      var mandateLink = document.getElementById('mandateLink');
      if (mandateLink && mandateLink.href && mandateLink.href !== '#') {
        window.open(mandateLink.href, '_blank');
      }
    }

    /* ---------- Terminal ---------- */

    function paymentSuccessHandler() {
      const terminalSpinnerElement = document.getElementById('terminalSpinner');
      const terminalSuccessElement = document.getElementById('terminalSuccess');
      terminalSpinnerElement.style.display = 'none';
      terminalSuccessElement.style.display = 'block';
      
      // If payment was for an invoice, mark it as paid
      if (currentInvoiceId) {
        const invoice = invoices.find(inv => inv.id === currentInvoiceId);
        if (invoice) {
          invoice.status = 'Paid';
          // Update invoices table
          updateInvoicesTable();
        }
      }
      
      // Clear timeout after 2 seconds and close the modal
      successPaymentTimeout = setTimeout(() => {
        closeModal('terminalPaymentModal');
        // If we're in the invoice view, update the status display
        if (document.getElementById('viewInvoiceModal').classList.contains('active')) {
          const statusElem = document.getElementById('viewInvoiceStatus');
          if (statusElem) {
            statusElem.textContent = 'Paid';
            statusElem.style.background = '#4caf50';
          }
        }
      }, 2000);
    }

    function onPayWithTerminbalClick(modalId) {
      const maxAttempts = 30;
      let attempts = 0;

      openModal(modalId);
      
      // Get amount either from invoice or product selection
      let amount;
      if (currentInvoiceId) {
        const invoice = invoices.find(inv => inv.id === currentInvoiceId);
        amount = invoice ? parseFloat(invoice.total) : 0;
      } else {
        var select = document.getElementById('modalProductSelect');
        amount = parseFloat(select.value);
      }
      
      if (!amount || isNaN(amount)) {
        alert("Invalid amount for terminal payment");
        closeModal(modalId);
        return;
      }

      const data = {
        amount: amount,
        currency: "GBP",
        country: "GB",
        transactionType: "Sale",
        paymentOption: {
          paymentOptionType: "CardPresent"
        },
        consumer: {
          firstName: "Gil",
          lastName: "Yanay",
          email: "b@b.com",
          country: "GB"
        }
      }

      let authorizationId = ""

      fetch(`https://sandbox.unipaas.com/platform/pay-ins`, {
        method: "POST",
        headers: getApiHeaders(),
        body: JSON.stringify(data)
      })
        .then(r => r.json())
        .then(jsonData => {
          authorizationId = jsonData.authorizationId

          const interval = setInterval(() => {
            attempts++;
            if(attempts === maxAttempts) {
              clearInterval(interval);
              closeModal('paymentOptionModal');
            }

            fetch(`https://sandbox.unipaas.com/platform/pay-ins/${authorizationId}`,
              {
                headers: getApiHeaders(),
                method: "GET"

              }
            )
              .then(response => response.json())
              .then(data => {
                console.log('Received data:', data);
                if (data.authorizationStatus === 'Captured') {
                  clearInterval(interval);
                  paymentSuccessHandler();
                }
                // handle the response data
              })
              .catch(error => {
                console.error('Error fetching data:', error);
              });
          }, 5000); // 5000 ms = 5 seconds
        })
        .catch(e => console.error("Terminal payment error:", e));
    }


    /* ---------- Payment / Checkout ---------- */
    function openModal(modalId) {
      const modal = document.getElementById(modalId);
      if (modal) {
        modal.classList.add('active');
        modal.style.display = 'flex';
        
        // Initialize payment modal if it's the payment option modal
        if (modalId === 'paymentOptionModal') {
          // Set default tab to Terminal
          const terminalTab = document.querySelector('.payment-tab[data-tab="terminal"]');
          if (terminalTab) {
            switchPaymentTab(terminalTab, 'terminal');
          }
          
          // Initialize saved card info based on selected customer
          updateSavedCardInfo();
        }
      }
    }
    function closeModal(modalId) {
      if(successPaymentTimeout) {
        clearTimeout(successPaymentTimeout);
        successPaymentTimeout = null;
      }
      const modal = document.getElementById(modalId);
      if (modal) {
        modal.classList.remove('active');
        modal.style.display = 'none';
      }
    }
    function copyQRCode() {
      var updateLink = document.getElementById('updatePaymentLink');
      if (updateLink && updateLink.href && updateLink.href !== '#') {
        window.open(updateLink.href, '_blank');
        return;
      }
      var renewalLink = document.getElementById('renewalPaymentLink');
      if (renewalLink && renewalLink.href && renewalLink.href !== '#') {
        window.open(renewalLink.href, '_blank');
      }
    }

    function openItemPaymentModal(amount, customer) {
      currentMemberRow = null;
      const modal = document.getElementById('updatePaymentModal');
      if (checkoutStatusTimer) {
        clearInterval(checkoutStatusTimer);
        checkoutStatusTimer = null;
      }
      document.getElementById('updatePaymentLink').textContent = '';
      document.getElementById('updatePaymentLink').href = '#';
      document.getElementById('updatePaymentQRCode').src = '';
      modal.classList.add('active');
      modal.style.display = 'flex';
      itemPaymentCheckout(amount, customer);
    }

    function itemPaymentCheckout(amount, customer) {
      if (!customer || !customer.email) {
        alert("Customer details are missing. Please select a valid customer.");
        return;
      }
      const data = {
        amount: amount,
        currency: "GBP",
        country: "GB",
        email: customer.email,
        vendorId: globalVendorId,
        paymentMethods: ["card"],
        reference: "item_payment_ref_" + new Date().getTime(),
        consumer: { reference: "item_consumer_ref_" + new Date().getTime() }
      };
      fetch("https://sandbox.unipaas.com/platform/pay-ins/checkout", {
        method: "POST",
        headers: getApiHeaders(),
        body: JSON.stringify(data)
      })
        .then(r => {
          if (!r.ok) throw new Error("Network error, status=" + r.status);
          return r.json();
        })
        .then(jsonData => {
          document.getElementById('updatePaymentLink').textContent = jsonData.shortLink;
          document.getElementById('updatePaymentLink').href = jsonData.shortLink;
          document.getElementById('updatePaymentQRCode').src =
            "https://api.qrserver.com/v1/create-qr-code/?size=150x150&data=" + encodeURIComponent(jsonData.shortLink);
          openModal('updatePaymentModal');
          startCheckoutStatusTimer(jsonData.id);
        })
        .catch(err => console.error(err));
    }
    function startCheckoutStatusTimer(checkoutId) {
      const startTime = Date.now();
      checkoutStatusTimer = setInterval(() => {
        const elapsed = (Date.now() - startTime) / 1000;
        if (elapsed > 400) {
          clearInterval(checkoutStatusTimer);
          return;
        }
        fetch("https://sandbox.unipaas.com/platform/pay-ins/checkout/" + checkoutId, {
          method: "GET",
          headers: getApiHeaders()
        })
          .then(r => r.json())
          .then(data => {
            if (data.status && data.status.toLowerCase() === 'paid') {
              clearInterval(checkoutStatusTimer);
              document.getElementById('completedAmount').textContent = data.amount || "0";
              document.getElementById('completedCurrency').textContent = data.currency || "";
              document.getElementById('completedReference').textContent = data.reference || "";
              // Close all related modals when checkout is paid
              closeModal('paymentOptionModal');
              closeModal('updatePaymentModal');
              closeModal('mandateModal');
              openModal('purchaseCompleteModal');
            }
          })
          .catch(e => console.error(e));
      }, 5000);
    }

    function closePurchaseCompleteModal() {
      closeModal('purchaseCompleteModal');
      closeModal('updatePaymentModal');
    }

    /* ---------- Renew Plan ---------- */
    function checkoutRenew(planId, amount, currency) {
      if (!globalVendorId) {
        alert("No vendor selected. Please configure a vendor first!");
        return;
      }
      const data = {
        amount: amount,
        currency: currency,
        email: "demo@test.com",
        country: "GB",
        paymentMethods: ["card", "directDebit"],
        shippingSameAsBilling: true,
        vendorId: globalVendorId,
        reference: "item_payment_ref_" + Date.now(),
        consumer: { reference: "con_ref_" + Date.now() },
        plans: [planId]
      };
      fetch("https://sandbox.unipaas.com/platform/pay-ins/checkout", {
        method: "POST",
        headers: getApiHeaders(),
        body: JSON.stringify(data)
      })
        .then(r => {
          if (!r.ok) throw new Error("Error, status=" + r.status);
          return r.json();
        })
        .then(jsonData => {
          const link = jsonData.shortLink;
          document.getElementById('renewalPaymentLink').textContent = link;
          document.getElementById('renewalPaymentLink').href = link;
        })
        .catch(e => console.error(e));
    }

    /* ---------- Update Payment Method ---------- */
    function updatePaymentMethodForMember(link) {
      currentMemberRow = link.closest('tr');
      const modal = document.getElementById('updatePaymentModal');
      if (checkoutStatusTimer) {
        clearInterval(checkoutStatusTimer);
        checkoutStatusTimer = null;
      }
      document.getElementById('updatePaymentLink').textContent = '';
      document.getElementById('updatePaymentLink').href = '#';
      document.getElementById('updatePaymentQRCode').src = '';
      modal.classList.add('active');
      modal.style.display = 'flex';
      updatePaymentCheckoutForExpired();
    }
    function updatePaymentCheckoutForExpired() {
      if (!globalVendorId) {
        alert("No vendor selected. Please configure a vendor first!");
        return;
      }
      const data = {
        amount: 0,
        currency: "GBP",
        country: "GB",
        phone: "+44 20 7123 4567",
        email: "test@unipaas.com",
        storePaymentMethod: true,
        vendorId: globalVendorId,
        paymentMethods: ["card"],
        reference: "expired_payment_ref_" + new Date().getTime(),
        consumer: { reference: "expired_consumer_ref_" + new Date().getTime() }
      };
      fetch("https://sandbox.unipaas.com/platform/pay-ins/checkout", {
        method: "POST",
        headers: getApiHeaders(),
        body: JSON.stringify(data)
      })
        .then(r => {
          if (!r.ok) throw new Error("Network error, status=" + r.status);
          return r.json();
        })
        .then(jsonData => {
          document.getElementById('updatePaymentLink').textContent = jsonData.shortLink;
          document.getElementById('updatePaymentLink').href = jsonData.shortLink;
          document.getElementById('updatePaymentQRCode').src =
            "https://api.qrserver.com/v1/create-qr-code/?size=150x150&data=" + encodeURIComponent(jsonData.shortLink);
          startExpiredPaymentMethodTimer(jsonData.id, currentMemberRow);
          openModal('updatePaymentModal');
        })
        .catch(err => console.error(err));
    }
    function startExpiredPaymentMethodTimer(checkoutId, clientRow) {
      const startTime = Date.now();
      const timer = setInterval(() => {
        const elapsed = (Date.now() - startTime) / 1000;
        if (elapsed > 400) {
          clearInterval(timer);
          return;
        }
        fetch("https://sandbox.unipaas.com/platform/pay-ins/checkout/" + checkoutId, {
          method: "GET",
          headers: getApiHeaders()
        })
          .then(r => {
            if (!r.ok) throw new Error("Network error, status=" + r.status);
            return r.json();
          })
          .then(data => {
            if (data.status && data.status.toLowerCase() === "paid") {
              clearInterval(timer);
              const authorizationId = data.authorizationId;
              if (authorizationId) {
                fetchAuthorizationDetails(authorizationId, clientRow);
              }
              closeModal('updatePaymentModal');
            }
          })
          .catch(err => console.error(err));
      }, 5000);
    }
    function fetchAuthorizationDetails(authorizationId, clientRow) {
      fetch("https://sandbox.unipaas.com/platform/pay-ins/" + authorizationId, {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
          "Authorization": "Bearer " + savedToken
        }
      })
        .then(r => {
          if (!r.ok) throw new Error("Network error, status=" + r.status);
          return r.json();
        })
        .then(data => {
          if (data.paymentOption) {
            let brand = "";
            let last4 = "";
            if (data.paymentOption.cardAccount) {
              brand = data.paymentOption.cardAccount.brand;
              last4 = data.paymentOption.cardAccount.last4Digits;
            } else {
              brand = data.paymentOption.brand;
              last4 = data.paymentOption.last4digits;
            }
            let logoHtml = "";
            if (brand) {
              let brandLower = brand.toLowerCase();
              if (brandLower === "visa") {
                logoHtml = '<span class="visa-logo"></span>';
              } else if (brandLower === "mastercard") {
                logoHtml = '<span class="mastercard"></span>';
              } else {
                logoHtml = '<span>' + brand + '</span>';
              }
            }
            if (clientRow && clientRow.cells.length >= 3) {
              clientRow.cells[0].innerHTML = logoHtml + " ****" + last4;
            }
          }
        })
        .catch(e => console.error(e));
    }

    /* ---------- PayPortal, Balance ---------- */
    function loadPayPortal() {
      let payload = { scopes: ["portal_read", "portal_write"], vendor: { reference: 'oded-test' } };
      if (globalVendorId) {
        payload.vendorId = globalVendorId;
      }
      fetch("https://sandbox.unipaas.com/platform/authorize", {
        method: "POST",
        headers: getApiHeaders(),
        body: JSON.stringify(payload)
      })
        .then(res => res.json())
        .then(data => {
          const newAccessToken = data.accessToken;
          if (uniPaasComponents) {
            uniPaasComponents.reset({ accessToken: newAccessToken, ...unipaasDefaultConfig });
          } else {
            uniPaasComponents = unipaas.components(newAccessToken, unipaasDefaultConfig);
          }
          const payPortal = uniPaasComponents.create("payPortal");
          payPortal.mount("#pay_portal");
        })
        .catch(err => console.error("Error fetching token:", err));
    }
    function loadBalance() {
      let payload = { scopes: ["portal_read", "portal_write"], vendor: { reference: 'oded-test' } };
      if (globalVendorId) {
        payload.vendorId = globalVendorId;
      }
      fetch("https://sandbox.unipaas.com/platform/authorize", {
        method: "POST",
        headers: getApiHeaders(),
        body: JSON.stringify(payload)
      })
        .then(res => res.json())
        .then(data => {
          const newAccessToken = data.accessToken;
          const balanceContainer = document.getElementById("balance");
          if (window.balanceInstance && typeof window.balanceInstance.unmount === "function") {
            window.balanceInstance.unmount();
          }
          balanceContainer.innerHTML = "";
          window.balanceComponents = unipaas.components(newAccessToken, unipaasDefaultConfig);
          window.balanceInstance = window.balanceComponents.create("balance");
          window.balanceInstance.mount("#balance");
        })
        .catch(err => console.error("Error fetching balance token:", err));
    }

    /* ---------- Settings (Restored Logic) ---------- */
    function openSettingsModal() {
      const settingsModal = document.getElementById('settingsModal');
      const settingsSection = document.getElementById('settings-section');
      
      // Check if we're already in the settings section
      if (settingsSection.style.display === 'block') {
        return; // Already showing settings
      }
      
      // Reset modal styling for popup display
      settingsModal.classList.add('modal-backdrop');
      settingsModal.classList.add('active');
      settingsModal.style.display = 'flex';
      
      const modalContent = settingsModal.querySelector('.modal-content');
      if (modalContent) {
        modalContent.classList.remove('inline-settings');
      }
      
      // Show close button for popup mode
      const closeBtn = settingsModal.querySelector('button[onclick="closeModal(\'settingsModal\')"]');
      if (closeBtn) {
        closeBtn.style.display = 'inline-block';
      }
      
      // Set current token value
      document.getElementById('accessTokenInput').value = savedToken;
    }
    function closeSettingsModal() {
      const settingsModal = document.getElementById('settingsModal');
      const settingsSection = document.getElementById('settings-section');
      
      // If we're in the settings section, don't close the modal
      if (settingsSection.style.display === 'block') {
        return;
      }
      
      closeModal('settingsModal');
    }
    function saveAccessToken() {
      savedToken = document.getElementById('accessTokenInput').value;
      const zeroState = document.getElementById('zeroStateToggle').checked;
      if (!zeroState && !globalVendorId) {
        fetchVendors(savedToken);
        return;
      } else if (zeroState) {
        globalVendorId = null;
        document.getElementById('stateStatusLabel').textContent = "Status: Zero state";
      }
      let payload = { scopes: ["portal_read", "portal_write"] };
      if (globalVendorId) {
        payload.vendorId = globalVendorId;
      }
      fetch("https://sandbox.unipaas.com/platform/authorize", {
        method: "POST",
        headers: getApiHeaders(),
        body: JSON.stringify(payload)
      })
        .then(res => res.json())
        .then(data => {
          const newAccessToken = data.accessToken;
          if (uniPaasComponents) {
            uniPaasComponents.reset({ accessToken: newAccessToken, ...unipaasDefaultConfig });
          } else {
            uniPaasComponents = unipaas.components(newAccessToken, unipaasDefaultConfig);
          }
          const payPortal = uniPaasComponents.create("payPortal");
          payPortal.mount("#pay_portal");
          const balance = uniPaasComponents.create("balance");
          balance.mount("#balance");
        })
        .catch(err => console.error("Error in saveAccessToken:", err));
      closeSettingsModal();
    }

    function fetchVendors(newKey) {
      fetch("https://sandbox.unipaas.com/platform/vendors", {
        method: "GET",
        headers: {
          "Authorization": "Bearer " + newKey,
          "Content-Type": "application/json"
        }
      })
        .then(r => r.json())
        .then(data => {
          const sel = document.getElementById('vendorSelect');
          sel.innerHTML = "";
          data.forEach(vendor => {
            const op = document.createElement('option');
            op.value = vendor.id;
            op.text = vendor.name;
            sel.appendChild(op);
          });
          openModal('vendorSelectionModal');
        })
        .catch(e => console.error(e));
    }
    function saveVendor() {
      const sel = document.getElementById('vendorSelect');
      globalVendorId = sel.value;
      const vendorName = sel.options[sel.selectedIndex].text;
      const statusLabel = document.getElementById('stateStatusLabel');
      if (statusLabel) {
        statusLabel.textContent = "Status: Vendor - " + vendorName;
      }
      closeModal('vendorSelectionModal');
      loadPayPortal();
      loadBalance();
    }

    /* ---------- Manage Plans ---------- */
    function loadManagePlans() {
      fetch("https://sandbox.unipaas.com/platform/pay-ins/plans", {
        method: "GET",
        headers: getApiHeaders()
      })
        .then(r => r.json())
        .then(data => {
          let plans = [];
          if (Array.isArray(data)) {
            plans = data.length > 0 && data[0].items ? data[0].items : data;
          } else if (data.items) {
            plans = data.items;
          }
          const tbody = document.getElementById("plansTableBody");
          tbody.innerHTML = "";
          plans.forEach(plan => {
            const row = document.createElement('tr');
            row.innerHTML =
              `<td style="padding: 12px; border-bottom: 1px solid #eee;">${plan.id}</td>
              <td style="padding: 12px; border-bottom: 1px solid #eee;">${plan.name || ''}</td>
              <td style="padding: 12px; border-bottom: 1px solid #eee; color:#c62828; font-weight:600;">${plan.description || ''}</td>
              <td style="padding: 12px; border-bottom: 1px solid #eee;">${plan.status || 'active'}</td>
              <td style="padding: 12px; border-bottom: 1px solid #eee;">
                <button class="btn btn-sm" onclick="openUpdatePlanModal('${plan.id}','${plan.name || ''}','${plan.description || ''}','${plan.status || 'active'}')">Update</button>
                <button class="btn btn-sm" style="background:#333; margin-left:0.5rem;" onclick="deletePlan('${plan.id}')">Delete</button>
              </td>`;
            tbody.appendChild(row);
          });
        })
        .catch(e => console.error(e));
    }
    function openUpdatePlanModal(planId, planName, planDescription, planStatus) {
      document.getElementById('updatePlanId').value = planId;
      document.getElementById('updatePlanName').value = planName;
      document.getElementById('updatePlanDescription').value = planDescription;
      document.getElementById('updatePlanStatus').value = planStatus;
      openModal('updatePlanModal');
    }
    function closeUpdatePlanModal() {
      closeModal('updatePlanModal');
    }
    function deletePlan(planId) {
      if (!confirm("Are you sure you want to delete plan " + planId + "?")) return;
      fetch("https://sandbox.unipaas.com/platform/pay-ins/plans/" + planId, {
        method: "DELETE",
        headers: getApiHeaders()
      })
        .then(r => {
          if (!r.ok) throw new Error("Status=" + r.status);
          return r.text();
        })
        .then(() => {
          alert("Plan deleted!");
          loadManagePlans();
        })
        .catch(e => alert("Error deleting plan: " + e.message));
    }
    document.getElementById('updatePlanForm').addEventListener('submit', function (e) {
      e.preventDefault();
      const planId = document.getElementById('updatePlanId').value;
      const payload = {
        name: document.getElementById('updatePlanName').value,
        description: document.getElementById('updatePlanDescription').value,
        status: document.getElementById('updatePlanStatus').value
      };
      fetch("https://sandbox.unipaas.com/platform/pay-ins/plans/" + planId, {
        method: "PATCH",
        headers: getApiHeaders(),
        body: JSON.stringify(payload)
      })
        .then(r => {
          if (!r.ok) throw new Error("Network response not ok, status=" + r.status);
          return r.json();
        })
        .then(data => {
          alert("Plan updated successfully!");
          closeUpdatePlanModal();
          loadManagePlans();
        })
        .catch(err => {
          alert("Error updating plan: " + err.message);
        });
    });

    /* ---------- Create Plan ---------- */
    document.getElementById('createPlanForm').addEventListener('submit', function (e) {
      e.preventDefault();
      const name = document.getElementById('planName').value.trim();
      if (!name) { alert("Plan Name is required."); return; }
      const desc = document.getElementById('planDescription').value.trim();
      const amountVal = document.getElementById('amount').value.trim();
      const amount = parseFloat(amountVal);
      if (isNaN(amount) || amount <= 0) {
        alert("Amount must be > 0.");
        return;
      }
      const currency = document.getElementById('currency').value;
      const frequency = document.getElementById('frequency').value;
      let periodUOM = "month";
      if (frequency === "weekly") periodUOM = "week";
      else if (frequency === "yearly") periodUOM = "year";
      const durationVal = document.getElementById('duration').value.trim();
      const duration = durationVal !== "" ? parseInt(durationVal) : 0;
      const autoRenewal = document.getElementById('autoRenewal').checked;
      let payload = {
        name,
        description: desc,
        currency,
        period: duration,
        periodUOM,
        autoRenewal,
        vendorId: globalVendorId,
        country: "GB"
      };
      const isRamp = document.getElementById('pricingModelToggle').checked;
      if (isRamp) {
        payload.pricingModel = "ramp";
        const container = document.getElementById('rampIntervalsContainer');
        const intervals = container.querySelectorAll('.interval-box');
        if (intervals.length === 0) {
          alert("Add at least 1 ramp interval or set to fixed model.");
          return;
        }
        let rampArr = [];
        intervals.forEach(div => {
          const unitInput = div.querySelector('.ramp-unit');
          const cyclesInput = div.querySelector('.ramp-cycles');
          const unitAmt = parseFloat(unitInput.value);
          const cyc = parseInt(cyclesInput.value);
          if (isNaN(unitAmt) || unitAmt <= 0) { alert("Invalid ramp unit amount."); return; }
          if (isNaN(cyc) || cyc <= 0) { alert("Invalid ramp cycles."); return; }
          rampArr.push({ unitAmount: unitAmt, cycles: cyc });
        });
        payload.rampIntervals = rampArr;
      } else {
        payload.pricingModel = "fixed";
        payload.price = amount;
      }
      if (document.getElementById('trialPeriodToggle').checked) {
        const tType = document.getElementById('trialPeriodType').value;
        const tDur = parseInt(document.getElementById('trialPeriodDuration').value);
        if (isNaN(tDur) || tDur <= 0) { alert("Trial duration must be > 0."); return; }
        payload.trialUOM = tType;
        payload.trialPeriod = tDur;
      }
      if (document.getElementById('setupFeeToggle').checked) {
        const sFeeVal = document.getElementById('setupFeeAmount').value;
        const setupFee = parseFloat(sFeeVal);
        if (isNaN(setupFee) || setupFee < 0) { alert("Setup fee must be >=0."); return; }
        payload.setupFee = setupFee;
      }
      fetch("https://sandbox.unipaas.com/platform/pay-ins/plans", {
        method: "POST",
        headers: getApiHeaders(),
        body: JSON.stringify(payload)
      })
        .then(r => {
          if (!r.ok) {
            return r.json().then(errData => {
              throw new Error(errData.message || "Error: " + r.status);
            });
          }
          return r.json();
        })
        .then(data => {
          document.getElementById('planCreationResult').textContent = "Plan created! ID: " + data.id;
          document.getElementById('createPlanForm').reset();
          document.getElementById('trialPeriodFields').style.display = 'none';
          document.getElementById('setupFeeFields').style.display = 'none';
          document.getElementById('rampIntervalsSection').style.display = 'none';
          document.getElementById('rampIntervalsContainer').innerHTML = "";
          document.getElementById('pricingModelLabel').textContent = "Fixed";
        })
        .catch(err => {
          document.getElementById('planCreationResult').textContent = "Error: " + err.message;
        });
    });
    document.getElementById('trialPeriodToggle').addEventListener('change', function () {
      document.getElementById('trialPeriodFields').style.display = this.checked ? 'block' : 'none';
    });
    document.getElementById('setupFeeToggle').addEventListener('change', function () {
      document.getElementById('setupFeeFields').style.display = this.checked ? 'block' : 'none';
    });
    document.getElementById('pricingModelToggle').addEventListener('change', function () {
      const isRamp = this.checked;
      document.getElementById('pricingModelLabel').textContent = isRamp ? "Ramp" : "Fixed";
      document.getElementById('rampIntervalsSection').style.display = isRamp ? "block" : "none";
    });
    document.getElementById('addRampInterval').addEventListener('click', function () {
      const container = document.getElementById('rampIntervalsContainer');
      const div = document.createElement('div');
      div.className = 'interval-box';
      div.style.display = 'flex';
      div.style.gap = '0.5rem';
      div.style.marginBottom = '0.5rem';
      div.innerHTML =
        `<input type="number" step="0.01" min="0.01" class="ramp-unit" style="flex:1;" placeholder="Unit Amount" />
        <input type="number" min="1" class="ramp-cycles" style="flex:1;" placeholder="Cycles" />
        <button type="button" class="remove-ramp-interval">Remove</button>`;
      container.appendChild(div);
      div.querySelector('.remove-ramp-interval').addEventListener('click', () => {
        container.removeChild(div);
      });
    });

    document.getElementById('zeroStateToggle').addEventListener('change', function () {
      // no-op
    });

    /* ---------- New Modal: Payment Option Modal Functions ---------- */
    function updateModalProductAmount() {
      var select = document.getElementById('modalProductSelect');
      var amountInput = document.getElementById('modalAmountInput');
      amountInput.value = select.value;
    }
    function updatePaymentOptionButtonText() {
      var paymentType = document.querySelector('input[name="paymentType"]:checked').value;
      var btn = document.getElementById('paymentOptionSubmit');
      if (paymentType === 'directDebit') {
        btn.textContent = "Request Mandate";
        document.getElementById('onlineOptions').style.display = "none";
      } else {
        btn.textContent = "Create Payment";
        document.getElementById('onlineOptions').style.display = "block";
      }
    }
    function handlePaymentOptionSubmit() {
      var paymentType = document.querySelector('input[name="paymentType"]:checked').value;
      if (paymentType === 'directDebit') {
        closeModal('paymentOptionModal');
        openModal('mandateModal');
        sendMandate("Demo User", "demo@example.com");
      } else {
        var isCard = document.getElementById('paymentOptionCards').checked;
        var isIBT = document.getElementById('paymentOptionOpenBanking').checked;
        var paymentMethods = [];
        if (isCard) paymentMethods.push("card");
        if (isIBT) paymentMethods.push("bankTransfer");
        if (paymentMethods.length === 0) {
          alert("Please select at least one online payment method.");
          return;
        }
        closeModal('paymentOptionModal');
        var amount = parseFloat(document.getElementById('modalAmountInput').value);
        createCheckout(paymentMethods, amount);
      }
    }
    function createCheckout(paymentMethods, amount) {
      var data = {
        amount: amount,
        currency: "GBP",
        country: "GB",
        email: "demo@example.com",
        vendorId: globalVendorId,
        paymentMethods: paymentMethods,
        reference: "checkout_" + Date.now(),
        consumer: { reference: "consumer_" + Date.now() }
      };
      fetch("https://sandbox.unipaas.com/platform/pay-ins/checkout", {
        method: "POST",
        headers: getApiHeaders(),
        body: JSON.stringify(data)
      })
        .then(r => {
          if (!r.ok) throw new Error("Network error, status=" + r.status);
          return r.json();
        })
        .then(jsonData => {
          document.getElementById('updatePaymentLink').textContent = jsonData.shortLink;
          document.getElementById('updatePaymentLink').href = jsonData.shortLink;
          document.getElementById('updatePaymentQRCode').src =
            "https://api.qrserver.com/v1/create-qr-code/?size=150x150&data=" + encodeURIComponent(jsonData.shortLink);
          openModal('updatePaymentModal');
          startCheckoutStatusTimer(jsonData.id);
        })
        .catch(err => console.error("Error in createCheckout:", err));
    }

    /* ---------- Floating Modal Functions ---------- */
    function openFloatingModal(link) {
      var iframe = document.getElementById("previewIframe");
      iframe.src = link;
      document.getElementById("floatingPreviewModal").style.display = "block";
    }
    function closeFloatingModal() {
      document.getElementById("floatingPreviewModal").style.display = "none";
    }

    /* New functions for Dashboard extra fields */
    function dashboardCollectPayment() {
      isDashboardPayment = true;
      openModal('paymentOptionModal');
    }
    function updateDashboardPrice() {
      var productSelect = document.getElementById('dashboardProduct');
      var priceInput = document.getElementById('dashboardPrice');
      priceInput.value = productSelect.value;
    }

    window.addEventListener('DOMContentLoaded', () => {
      showTab('dashboard');
      loadPayPortal();
      loadBalance();
    
  // Attach onboarding flow to Balance component button
  const balanceEl = document.getElementById('balance');
  if (balanceEl) {
    balanceEl.addEventListener('click', function(e) {
      if (e.target.tagName === 'BUTTON' && e.target.textContent.trim().toLowerCase() === 'get started') {
        openOnboardingComponent();
      }
    });
  }
});

    document.addEventListener("DOMContentLoaded", function () {
      const checkComponents = setInterval(() => {
        if (typeof uniPaasComponents !== "undefined" && uniPaasComponents) {
          clearInterval(checkComponents);
          document.getElementById("onboardingModal").style.display = "none";
          uniPaasComponents.on("paymentsEnable", (e) => {
            console.log("paymentsEnable event", e.detail);
          });
          uniPaasComponents.on("startOnboarding", (e) => {
            console.log("startOnboarding event", e.detail);
            // Show loading spinner while creating vendor
            const loadingOverlay = document.getElementById("loadingOverlay");
            loadingOverlay.style.display = "flex";
            
            // Don't show the onboarding modal until content is ready
            const modal = document.getElementById("onboardingModal");
            modal.style.display = "none";
            
            if (!globalVendorId) {
              fetch("https://sandbox.unipaas.com/platform/vendors", {
                method: "POST",
                headers: getApiHeaders(),
                body: JSON.stringify({
                  "businessName": "Better Gym",
                  "type": "individual",
                  "firstName": "TESTcomplete John",
                  "lastName": "Mitch",
                  "email": "john.doe@example.com",
                  "country": "GB",
                  "createOnboardingLink": true
                })
              })
                .then(response => response.json())
                .then(data => {
                  globalVendorId = data.id;
                  return fetch(`https://sandbox.unipaas.com/platform/vendors/${globalVendorId}/onboarding`, {
                    method: "POST",
                    headers: getApiHeaders(),
                    body: JSON.stringify({
                      "fields": [
                        {
                          "alias": "individual.address",
                          "value": {
                            "country": "GB",
                            "city": "London",
                            "street": "New Cavendish Street",
                            "houseNumber": "64",
                            "postCode": "W1G 8TB"
                          }
                        },
                        {
                          "alias": "individual.phone",
                          "value": "+447911123456"
                        },
                        {
                          "alias": "individual.birthDate",
                          "value": "1980-01-01"
                        },
                        {
                          "alias": "business.url",
                          "value": "http://example.com"
                        },
                        {
                          "alias": "business.businessAge",
                          "value": "1-2 years"
                        },
                        {
                          "alias": "business.category",
                          "value": "FOOD_DELIVERY"
                        },
                        {
                          "alias": "business.serviceDescription",
                          "value": "Gym operator"
                        },
                        {
                          "alias": "business.agreement",
                          "value": {
                            "accepted": true,
                            "ipAddress": "1.1.1.1"
                          }
                        },
                        {
                          "alias": "business.bankDetails",
                          "value": {
                            "accountNumber": "38290008",
                            "sortCode": "20-04-15"
                          }
                        },
                        {
                          "alias": "business.avgMonthlyTurnover",
                          "value": "£10,000 - £100,000"
                        },
                        {
                          "alias": "business.avgSingleTrxValue",
                          "value": "£500 - £14,999"
                        },
                        {
                          "alias": "business.fulfillmentTimeframe",
                          "value": "Within 2 weeks"
                        }
                      ]
                    })
                  });
                })
                .then(response => response.json())
                .then(() => {
                  return fetch("https://sandbox.unipaas.com/platform/authorize", {
                    method: "POST",
                    headers: getApiHeaders(),
                    body: JSON.stringify({
                      scopes: ["portal_read", "portal_write"],
                      vendorId: globalVendorId
                    })
                  });
                })
                .then(res => res.json())
                .then(data => {
                  const newAccessToken = data.accessToken;
                  uniPaasComponents.reset({ accessToken: newAccessToken, unipaasDefaultConfig });
                  const onboarding = uniPaasComponents.create("onboarding");
                  
                  // Mount the component first
                  onboarding.mount("#onboarding");
                  
                  // Only now show the modal and hide the loading spinner
                  setTimeout(() => {
                    modal.style.display = "flex";
                    loadingOverlay.style.display = "none";
                  }, 100); // Small delay to ensure component is rendered
                })
                .catch(err => {
                  console.error("Error during onboarding setup:", err);
                  // Hide loading spinner on error
                  loadingOverlay.style.display = "none";
                });
            } else {
              fetch("https://sandbox.unipaas.com/platform/authorize", {
                method: "POST",
                headers: getApiHeaders(),
                body: JSON.stringify({
                  scopes: ["portal_read", "portal_write"],
                  vendorId: globalVendorId
                })
              })
                .then(res => res.json())
                .then(data => {
                  const newAccessToken = data.accessToken;
                  const onboarding = uniPaasComponents.create("onboarding");
                  
                  // Mount the component first
                  onboarding.mount("#onboarding");
                  
                  // Only now show the modal and hide the loading spinner
                  setTimeout(() => {
                    modal.style.display = "flex";
                    loadingOverlay.style.display = "none";
                  }, 100); // Small delay to ensure component is rendered
                })
                .catch(err => {
                  console.error("Error during re-authorizing for onboarding:", err);
                  // Hide loading spinner on error
                  loadingOverlay.style.display = "none";
                });
            }
          });
          uniPaasComponents.on("onboardingFinished", (e) => {
            console.log("onboardingFinished event", e.detail);
            document.getElementById("onboardingModal").style.display = "none";
            
            // Show loading spinner while refreshing components
            const loadingOverlay = document.getElementById("loadingOverlay");
            loadingOverlay.style.display = "flex";
            
            let payload = { scopes: ["portal_read", "portal_write"] };
            if (globalVendorId) {
              payload.vendorId = globalVendorId;
            }
            fetch("https://sandbox.unipaas.com/platform/authorize", {
              method: "POST",
              headers: getApiHeaders(),
              body: JSON.stringify(payload)
            })
              .then(res => res.json())
              .then(data => {
                const newAccessToken = data.accessToken;
                if (uniPaasComponents) {
                  uniPaasComponents.reset({ accessToken: newAccessToken });
                } else {
                  uniPaasComponents = unipaas.components(newAccessToken, unipaasDefaultConfig);
                }
                const payPortal = uniPaasComponents.create("payPortal");
                payPortal.mount("#pay_portal");
                const balance = uniPaasComponents.create("balance");
                balance.mount("#balance");
                
                // Hide loading spinner once components are mounted
                loadingOverlay.style.display = "none";
              })
              .catch(err => {
                console.error("Error fetching token on onboardingFinished:", err);
                // Hide loading spinner on error
                loadingOverlay.style.display = "none";
              });
          });
          uniPaasComponents.on("payPortal", (e) => {
            console.log("payPortal event", e.detail);
          });
          uniPaasComponents.on("invoicePage", (e) => {
            console.log("invoicePage event", e.detail);
          });
          uniPaasComponents.on("buyerPage", (e) => {
            console.log("buyerPage event", e.detail);
          });
        }
      }, 100);
    });

    function openOnboardingComponent() {
      // Show loading spinner
      const loadingOverlay = document.getElementById("loadingOverlay");
      loadingOverlay.style.display = "flex";

      // Don't show the onboarding modal until content is ready
      const modal = document.getElementById("onboardingModal");
      modal.style.display = "none"; // Ensure modal is hidden initially
      
      if (!globalVendorId) {
        fetch("https://sandbox.unipaas.com/platform/vendors", {
          method: "POST",
          headers: getApiHeaders(),
          body: JSON.stringify({
            "businessName": "Better Delivery",
            "type": "individual",
            "firstName": "John",
            "lastName": "Doe",
            "email": "john.doe@example.com",
            "country": "GB",
            "url": "http://example.com",
            "serviceDescription": "Gym operator",
            "birthDate": "1980-01-01",
            "phone": "+44912345678",
            "category": "FOOD_DELIVERY",
            "createOnboardingLink": true
          })
        })
          .then(response => response.json())
          .then(data => {
            globalVendorId = data.id;
            return fetch(`https://sandbox.unipaas.com/platform/vendors/${globalVendorId}/onboarding`, {
              method: "POST",
              headers: getApiHeaders(),
              body: JSON.stringify({
                "fields": [
                  {
                    "alias": "individual.address",
                    "value": {
                      "country": "GB",
                      "city": "London",
                      "street": "New Cavendish Street",
                      "houseNumber": "64",
                      "postCode": "W1G 8TB"
                    }
                  },
                  {
                    "alias": "business.bankAccount",
                    "value": "38290008"
                  },
                  {
                    "alias": "business.sortCode",
                    "value": "200415"
                  }
                ]
              })
            });
          })
          .then(response => response.json())
          .then(() => {
            return fetch("https://sandbox.unipaas.com/platform/authorize", {
              method: "POST",
              headers: getApiHeaders(),
              body: JSON.stringify({
                scopes: ["portal_read", "portal_write"],
                vendorId: globalVendorId
              })
            });
          })
          .then(res => res.json())
          .then(data => {
            const newAccessToken = data.accessToken;
            uniPaasComponents.reset({ accessToken: newAccessToken, unipaasDefaultConfig });
            const onboarding = uniPaasComponents.create("onboarding");
            
            // Mount the component first
            onboarding.mount("#onboarding");
            
            // Only now show the modal and hide the loading overlay
            setTimeout(() => {
              modal.style.display = "flex";
              loadingOverlay.style.display = "none";
            }, 100); // Small delay to ensure component is rendered
          })
          .catch(err => {
            console.error("Error during onboarding setup:", err);
            // Hide loading spinner on error
            loadingOverlay.style.display = "none";
          });
      } else {
        fetch("https://sandbox.unipaas.com/platform/authorize", {
          method: "POST",
          headers: getApiHeaders(),
          body: JSON.stringify({
            scopes: ["portal_read", "portal_write"],
            vendorId: globalVendorId
          })
        })
          .then(res => res.json())
          .then(data => {
            const newAccessToken = data.accessToken;
            uniPaasComponents.reset({ accessToken: newAccessToken, unipaasDefaultConfig });
            const onboarding = uniPaasComponents.create("onboarding");
            
            // Mount the component first
            onboarding.mount("#onboarding");
            
            // Only now show the modal and hide the loading overlay
            setTimeout(() => {
              modal.style.display = "flex";
              loadingOverlay.style.display = "none";
            }, 100); // Small delay to ensure component is rendered
          })
          .catch(err => {
            console.error("Error during re-authorizing for onboarding:", err);
            // Hide loading spinner on error
            loadingOverlay.style.display = "none";
          });
      }
    }
    function closeOnboardingModal() {
      document.getElementById("onboardingModal").style.display = "none";
    }

    /* =================== Pay with Saved Card Functionality =================== */
    function chargeWithSavedCard() {
      const button = document.getElementById("paymentActionButton");
      const originalText = button.textContent;
      const originalWidth = button.offsetWidth;
      button.style.minWidth = originalWidth + "px";
      button.textContent = "Processing...";
      button.disabled = true;
      
      let invoiceAmount = parseFloat(document.getElementById("modalAmountInput").value);
      if (isNaN(invoiceAmount) || invoiceAmount <= 0) {
        alert("Invoice amount must be a positive number.");
        button.textContent = originalText;
        button.disabled = false;
        return;
      }
      
      // Get customer details from the dropdown
      const customerSelect = document.getElementById('customerSelect');
      const selectedOption = customerSelect.options[customerSelect.selectedIndex];
      const customerName = selectedOption.text.split(' (')[0];
      const customerEmail = selectedOption.text.match(/\((.*?)\)/)?.[1] || 'demo@example.com';
      
      // Use the dynamic payment option ID
      const paymentOptionId = window.currentPaymentOptionId || "67a3759c2d2d4420a8b7842f"; // Default to John's if not set
      
      const payload = {
        amount: invoiceAmount,
        currency: "GBP",
        description: "Invoice Payment",
        vendorId: globalVendorId,
        paymentOptionId: paymentOptionId,
        orderId: "item_payment_ref_" + new Date().getTime(),
        consumer: {
          email: customerEmail,
          firstName: customerName.split(' ')[0],
          lastName: customerName.split(' ')[1] || '',
          country: "GB"
        }
      };

      fetch("https://sandbox.unipaas.com/platform/pay-ins", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "Authorization": "Bearer " + savedToken
        },
        body: JSON.stringify(payload)
      })
        .then(response => {
          if (!response.ok) {
            throw new Error("Network response was not OK, status = " + response.status);
          }
          return response.json();
        })
        .then(jsonData => {
          console.log("Payment Request Successful:", jsonData);
          if (jsonData.transactionStatus === "Approved") {
            if (checkoutStatusTimer) {
              clearInterval(checkoutStatusTimer);
              checkoutStatusTimer = null;
            }
            document.getElementById('completedAmount').textContent = jsonData.amount || invoiceAmount;
            document.getElementById('completedCurrency').textContent = jsonData.currency || "GBP";
            document.getElementById('completedReference').textContent = jsonData.authorizationId || "";
            closeModal('paymentOptionModal');
            openModal('purchaseCompleteModal');
            
            // If this was for an invoice, mark it as paid
            if (currentInvoiceId) {
              const invoice = invoices.find(inv => inv.id === currentInvoiceId);
              if (invoice) {
                invoice.status = 'Paid';
                // Update invoices table
                updateInvoicesTable();
              }
            }
          } else {
            alert("Payment failed: " + (jsonData.message || "Unknown error"));
          }
        })
        .catch(error => {
          console.error("Error in Payment Request:", error);
          alert("Payment failed: " + error.message);
        })
        .finally(() => {
          button.textContent = originalText;
          button.disabled = false;
        });
    }

    // Highlight active tab in sidebar
    document.querySelectorAll('#sidebar li').forEach(li => {
      li.addEventListener('click', () => {
        document.querySelectorAll('#sidebar li').forEach(el => el.classList.remove('active'));
        li.classList.add('active');
      });
    });

    /* =================== Payment Modal Tab Functionality =================== */
    function switchPaymentTab(tabElement, tabName) {
      // Update active tab styling
      const allTabs = document.querySelectorAll('.payment-tab');
      allTabs.forEach(tab => {
        tab.classList.remove('active');
        tab.style.borderBottom = 'none';
      });
      
      tabElement.classList.add('active');
      tabElement.style.borderBottom = '2px solid var(--primary-color)';
      
      // Hide all tab panes
      const allPanes = document.querySelectorAll('.tab-pane');
      allPanes.forEach(pane => {
        pane.style.display = 'none';
      });
      
      // Show selected tab pane
      document.getElementById(tabName + '-tab').style.display = 'block';
      
      // Update action button text and onclick handler based on selected tab
      const actionButton = document.getElementById('paymentActionButton');
      
      if (tabName === 'terminal') {
        actionButton.textContent = 'Pay by Terminal';
        actionButton.onclick = function() { onPayWithTerminbalClick('terminalPaymentModal'); };
      } else if (tabName === 'saved-card') {
        actionButton.textContent = 'Charge Saved Card';
        actionButton.onclick = function() { chargeWithSavedCard(); };
      } else if (tabName === 'online') {
        actionButton.textContent = 'Create Payment Link';
        actionButton.onclick = function() { handleOnlinePaymentSubmit(); };
      } else if (tabName === 'direct-debit') {
        actionButton.textContent = 'Set Up Direct Debit';
        actionButton.onclick = function() { handleDirectDebitSubmit(); };
      }
    }
    
    // Function to handle online payment submission (previously handleCheckoutSubmit)
    function handleOnlinePaymentSubmit() {
      const paymentMethods = [];
      if (document.getElementById('checkoutOptionCards').checked) paymentMethods.push('card');
      if (document.getElementById('checkoutOptionOpenBanking').checked) paymentMethods.push('bankTransfer');
      
      if (paymentMethods.length === 0) {
        alert("Please select at least one payment method.");
        return;
      }
      
      const amount = parseFloat(document.getElementById('modalAmountInput').value);
      closeModal('paymentOptionModal');
      createCheckout(paymentMethods, amount);
    }
    
    // Function to handle direct debit submission
    function handleDirectDebitSubmit() {
      // Get customer details from the dropdown
      const customerSelect = document.getElementById('customerSelect');
      const selectedOption = customerSelect.options[customerSelect.selectedIndex];
      const customerName = selectedOption.text.split(' (')[0];
      const customerEmail = selectedOption.text.match(/\((.*?)\)/)?.[1] || 'demo@example.com';
      
      closeModal('paymentOptionModal');
      openModal('mandateModal');
      sendMandate(customerName, customerEmail);
    }

    function updateSavedCardInfo() {
      const customerSelect = document.getElementById('customerSelect');
      const selectedValue = customerSelect.value;
      const cardTypeNumber = document.getElementById('card-type-number');
      const cardExpiry = document.getElementById('card-expiry');
      
      // Different card info for each customer
      if (selectedValue === 'john') {
        cardTypeNumber.textContent = 'Visa ending in 4436';
        cardExpiry.textContent = 'Expires 04/28';
      } else if (selectedValue === 'oded') {
        cardTypeNumber.textContent = 'Mastercard ending in 8752';
        cardExpiry.textContent = 'Expires 09/28';
      }
      
      // Also update the paymentOptionId used in the chargeWithSavedCard function
      if (selectedValue === 'john') {
        window.currentPaymentOptionId = "67a3759c2d2d4420a8b7842f"; // John's payment option ID
      } else if (selectedValue === 'oded') {
        window.currentPaymentOptionId = "67b4861d2e3e5531a9c78531"; // Oded's payment option ID (example)
      }
    }
    
    // Call this function when the modal opens to set initial values
    function initializePaymentModal() {
      updateSavedCardInfo();
    }

    function sendInvoiceReminder() {
      // Count overdue invoices
      const today = new Date();
      today.setFullYear(2025); // Use 2025 as the current year for comparison
      
      const overdueInvoices = invoices.filter(invoice => {
        if (invoice.status === 'Paid' || invoice.type !== 'Invoice') return false;
        const dueDate = new Date(invoice.dueDate.split('/').reverse().join('-'));
        return today > dueDate;
      });
      
      if (overdueInvoices.length === 0) {
        alert("No overdue invoices to send reminders for.");
        return;
      }
      
      // Format the list of overdue invoices for display
      const overdueList = overdueInvoices.map(inv => 
        `${inv.id} - ${inv.customer} - £${inv.total} (Due: ${inv.dueDate})`
      ).join('\n');
      
      const confirmed = confirm(`Send AI-generated payment reminders to the following ${overdueInvoices.length} overdue invoices?\n\n${overdueList}`);
      
      if (confirmed) {
        alert("Payment reminders sent successfully!");
      }
    }

  </script>
  <div class="modal-backdrop" id="terminalPaymentModal">
    <div class="modal-content" style="text-align: center; padding: 2rem; position: relative;">
      <button class="close-btn" onclick="closeModal('terminalPaymentModal')"
        style="position:absolute; top:10px; right:10px; background:none; border:none; font-size:20px; color:#666; cursor:pointer;">×</button>
      <div id="terminalSpinner">
        <div style="margin-bottom: 1rem;">
          <div class="spinner"
            style="border: 6px solid #eee; border-top: 6px solid #00bfa5; border-radius: 50%; width: 48px; height: 48px; animation: spin 1s linear infinite; margin: auto;">
          </div>
        </div>
        <p id="terminalStatus" style="font-size: 1.1rem; font-weight: 500; color: #00bfa5;">Waiting for payment...</p>
      </div>

      <div id="terminalSuccess" style="display: none;">
        <div style="margin-bottom: 1rem;">
          <div class="success-icon">
            <div class="checkmark"></div>
          </div>
        </div>
        <p id="terminalStatus" style="font-size: 1.1rem; font-weight: 500; color: #00bfa5;">Payment successful</p>
      </div>

    </div>
  </div>
  <style>
    @keyframes spin {
      0% {
        transform: rotate(0deg);
      }

      100% {
        transform: rotate(360deg);
      }
    }
  </style>
  <style>
    @keyframes spin {
      0% {
        transform: rotate(0deg);
      }

      100% {
        transform: rotate(360deg);
      }
    }
  </style>

  <!-- Invoice Creation Modal -->
  <div class="modal-backdrop" id="invoiceModal">
    <div class="modal-content" style="width: 700px; max-width: 95%;">
      <button class="close-btn" onclick="closeModal('invoiceModal')">×</button>
      <h2>Create Estimate/Invoice</h2>

      <div style="margin-bottom: 1rem;">
        <label style="display: inline-block; margin-right: 1rem;">
          <input type="radio" name="documentType" value="invoice" checked onchange="toggleDocumentType()"> Invoice
        </label>
        <label style="display: inline-block;">
          <input type="radio" name="documentType" value="estimate" onchange="toggleDocumentType()"> Estimate
        </label>
      </div>

      <div style="display: flex; gap: 1rem; margin-bottom: 1rem; flex-wrap: wrap;">
        <div style="flex: 1; min-width: 250px;">
          <label for="invoiceCustomer"
            style="display: block; margin-bottom: 0.5rem; font-weight: 500;">Customer*</label>
          <select id="invoiceCustomer" style="width: 100%; padding: 0.5rem; border: 1px solid #ccc; border-radius: 4px;"
            required>
            <option value="">Select Customer</option>
            <option value="oded">Oded Kovach</option>
            <option value="john">John Mitch</option>
          </select>
        </div>
        <div style="flex: 1; min-width: 250px;">
          <label for="invoiceDate" style="display: block; margin-bottom: 0.5rem; font-weight: 500;">Date*</label>
          <input type="date" id="invoiceDate"
            style="width: 100%; padding: 0.5rem; border: 1px solid #ccc; border-radius: 4px;" required>
        </div>
      </div>

      <div style="margin-bottom: 1rem;">
        <label for="invoiceItems" style="display: block; margin-bottom: 0.5rem; font-weight: 500;">Items*</label>
        <div id="invoiceItemsContainer">
          <div class="invoice-item" style="display: flex; gap: 0.5rem; margin-bottom: 0.5rem; align-items: center;">
            <input type="text" placeholder="Item description"
              style="flex: 3; padding: 0.5rem; border: 1px solid #ccc; border-radius: 4px;" class="item-desc">
            <input type="number" min="1" value="1"
              style="flex: 1; padding: 0.5rem; border: 1px solid #ccc; border-radius: 4px;" class="item-qty">
            <input type="number" min="0" step="0.01" placeholder="0.00"
              style="flex: 1; padding: 0.5rem; border: 1px solid #ccc; border-radius: 4px;" class="item-price">
            <button type="button" onclick="removeInvoiceItem(this)"
              style="background: #f44336; color: white; border: none; border-radius: 4px; padding: 0.5rem 0.8rem;">×</button>
          </div>
        </div>
        <button type="button" onclick="addInvoiceItem()"
          style="margin-top: 0.5rem; background: #f9f9f9; border: 1px dashed #ccc; width: 100%; padding: 0.5rem; border-radius: 4px;">+
          Add Item</button>
      </div>

      <div
        style="display: flex; justify-content: space-between; margin-bottom: 1rem; padding-top: 1rem; border-top: 1px solid #eee;">
        <div>
          <label for="invoiceNotes" style="display: block; margin-bottom: 0.5rem; font-weight: 500;">Notes</label>
          <textarea id="invoiceNotes" rows="3"
            style="width: 100%; padding: 0.5rem; border: 1px solid #ccc; border-radius: 4px;"
            placeholder="Additional notes or terms..."></textarea>
        </div>
        <div style="min-width: 150px; text-align: right;">
          <div style="margin-bottom: 0.5rem;">Subtotal: £<span id="invoiceSubtotal">0.00</span></div>
          <div style="margin-bottom: 0.5rem;">Tax (20%): £<span id="invoiceTax">0.00</span></div>
          <div style="font-weight: bold; font-size: 1.1rem;">Total: £<span id="invoiceTotal">0.00</span></div>
        </div>
      </div>

      <div style="display: flex; justify-content: space-between; margin-top: 1rem;">
        <button type="button" onclick="closeModal('invoiceModal')"
          style="padding: 0.6rem 1rem; border: 1px solid #ccc; background: #f5f5f5; border-radius: 4px;">Cancel</button>
        <button type="button" id="saveInvoiceBtn" onclick="saveInvoice()"
          style="padding: 0.6rem 1rem; background: var(--secondary-color); color: white; border: none; border-radius: 4px;">Create
          Invoice</button>
      </div>
    </div>
  </div>

  <!-- Invoice View Modal -->
  <div class="modal-backdrop" id="invoiceViewModal">
    <div class="modal-content" style="width: 800px; max-width: 95%;">
      <button class="close-btn" onclick="closeModal('invoiceViewModal')">×</button>
      <div id="invoiceViewContent">
        <div style="display: flex; justify-content: space-between; margin-bottom: 2rem;">
          <div>
            <h2 id="viewInvoiceTitle">Invoice #INV-001</h2>
            <p id="viewInvoiceStatus"
              style="padding: 0.3rem 0.6rem; background: #ff9800; color: white; display: inline-block; border-radius: 4px; font-weight: 500;">
              Unpaid</p>
          </div>
          <div style="text-align: right;">
            <p>Date: <span id="viewInvoiceDate">01/01/2023</span></p>
            <p>Due Date: <span id="viewInvoiceDueDate">15/01/2023</span></p>
          </div>
        </div>

        <div style="display: flex; justify-content: space-between; margin-bottom: 2rem;">
          <div>
            <h3 style="margin-bottom: 0.5rem;">From</h3>
            <p>Cashly Business</p>
            <p>123 Business St.</p>
            <p>London, UK</p>
          </div>
          <div>
            <h3 style="margin-bottom: 0.5rem;">To</h3>
            <p id="viewInvoiceCustomer">John Mitch</p>
            <p id="viewInvoiceCustomerEmail">john.mitch@gmail.com</p>
          </div>
        </div>

        <table style="width: 100%; border-collapse: collapse; margin-bottom: 2rem;">
          <thead style="background: #f5f5f5;">
            <tr>
              <th style="padding: 0.8rem; text-align: left; border-bottom: 1px solid #ddd;">Item</th>
              <th style="padding: 0.8rem; text-align: center; border-bottom: 1px solid #ddd;">Quantity</th>
              <th style="padding: 0.8rem; text-align: right; border-bottom: 1px solid #ddd;">Price</th>
              <th style="padding: 0.8rem; text-align: right; border-bottom: 1px solid #ddd;">Total</th>
            </tr>
          </thead>
          <tbody id="viewInvoiceItems">
            <!-- Items will be inserted here -->
          </tbody>
          <tfoot>
            <tr>
              <td colspan="2" style="padding: 0.8rem; border-top: 1px solid #ddd;"></td>
              <td style="padding: 0.8rem; text-align: right; border-top: 1px solid #ddd;">Subtotal</td>
              <td style="padding: 0.8rem; text-align: right; border-top: 1px solid #ddd;">£<span
                  id="viewInvoiceSubtotal">0.00</span></td>
            </tr>
            <tr>
              <td colspan="2"></td>
              <td style="padding: 0.8rem; text-align: right;">Tax (20%)</td>
              <td style="padding: 0.8rem; text-align: right;">£<span id="viewInvoiceTax">0.00</span></td>
            </tr>
            <tr>
              <td colspan="2"></td>
              <td style="padding: 0.8rem; text-align: right; font-weight: bold;">Total</td>
              <td style="padding: 0.8rem; text-align: right; font-weight: bold;">£<span
                  id="viewInvoiceTotal">0.00</span></td>
            </tr>
          </tfoot>
        </table>

        <div style="margin-bottom: 2rem;">
          <h3 style="margin-bottom: 0.5rem;">Notes</h3>
          <p id="viewInvoiceNotes" style="background: #f9f9f9; padding: 1rem; border-radius: 4px;">Thank you for your
            business!</p>
        </div>

        <div style="display: flex; justify-content: flex-end; gap: 1rem;">
          <button type="button" onclick="printInvoice()"
            style="padding: 0.6rem 1rem; border: 1px solid #ccc; background: #f5f5f5; border-radius: 4px;">
            <i class="fa-solid fa-print" style="margin-right: 0.5rem;"></i>Print
          </button>
          <button type="button" onclick="downloadPDF()"
            style="padding: 0.6rem 1rem; border: 1px solid #ccc; background: #f5f5f5; border-radius: 4px;">
            <i class="fa-solid fa-download" style="margin-right: 0.5rem;"></i>Download PDF
          </button>
          <button type="button" onclick="sendInvoiceEmail()"
            style="padding: 0.6rem 1rem; border: 1px solid #ccc; background: #f5f5f5; border-radius: 4px;">
            <i class="fa-solid fa-envelope" style="margin-right: 0.5rem;"></i>Send by Email
          </button>
          <button type="button" onclick="collectPayment()"
            style="padding: 0.6rem 1rem; background: var(--secondary-color); color: white; border: none; border-radius: 4px;">
            <i class="fa-solid fa-credit-card" style="margin-right: 0.5rem;"></i>Collect Payment
          </button>
        </div>
      </div>
    </div>
  </div>

  <!-- Loading Spinner Overlay -->
  <style>
    /* Simple Loading Indicator */
    .loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.7);
      display: none;
      justify-content: center;
      align-items: center;
      z-index: 3000;
    }

    .loading-container {
      background-color: white;
      padding: 20px 40px;
      border-radius: 8px;
      text-align: center;
    }

    .loading-container p {
      margin-top: 12px;
      font-size: 16px;
      color: var(--primary-color);
      font-weight: 500;
    }

    .simple-spinner {
      width: 40px;
      height: 40px;
      border: 4px solid rgba(0, 0, 0, 0.1);
      border-left-color: var(--primary-color);
      border-radius: 50%;
      margin: 0 auto;
      animation: spin 1s linear infinite;
    }

    @keyframes spin {
      to {
        transform: rotate(360deg);
      }
    }
  </style>
</body>

</html>
